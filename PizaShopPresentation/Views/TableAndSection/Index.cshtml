@{
    ViewData["Title"] = "Table And Section";
}

<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


<div class="Users-content mt-0 p-xl-5 p-lg-4 p-md-4 p-sm-4 p-4">


    <div class="d-flex align-items-center justify-content-between my-2">
        <div>
            <div class="fw-bolder fs-2 page-text">Sections/Tables</div>
        </div>
        <div class="d-flex">
            <a asp-controller="TableAndSection" asp-action="Index"><button
                    class="btn btn-main bg-primary rounded-2 ms-1 text-white fs-6 d-none d-lg-block"
                    type="submit">Back</button></a>
            <a asp-controller="TableAndSection" asp-action="Index"><button
                    class="btn btn-main bg-primary rounded- ms-1 text-white fs-6 d-block d-lg-none" type="submit">
                    < </button></a>
        </div>
    </div>

    <div class="row bg-white shadow-lg rounded-2">
        <div id="category-section" class="col-xl-3 col-lg-4 col-md-12 col-12 ps-3 pe-0 category-section"
            style="background: rgba(215,237,255,1);">
            <div class="row d-flex py-3 pe-3">
                <div class="d-flex align-items-center fw-bold justify-content-between page-text fs-5">
                    Sections
                    <button type="button" class="btn bg-white btn-outline-dark text-black" data-bs-toggle="modal"
                        data-bs-target="#exampleModal12" data-bs-whatever="">
                        <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor"
                            class="bi bi-plus-lg" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                        </svg>
                    </button>
                </div>
            </div>
            <div style="overflow: auto; height: 50dvh;" class="custom-scrollbar" id="sectionsContainer">
                <!-- Sections loaded here via AJAX -->
            </div>
        </div>
        <!-- Content Section -->
        <div id="content-section" class="col-xl-9 col-lg-8 col-md-12 col-12 p-2">
            <div class="row menu-content">
                <div class="col d-flex align-items-center" id="toggle-container">
                    <div>
                        <svg id="categoryToggle" xmlns="http://www.w3.org/2000/svg" width="30" height="30"
                            fill="currentColor" class="bi bi-list-ul me-2" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                        </svg>
                    </div>
                    <div class="fw-bolder fs-5 page-text">Tables</div>
                </div>
            </div>
            <div class="row">
                <div class="d-flex justify-content-end">
                    <form class="d-flex align-items-center me-2 rounded-end-3" role="search" id="searchForm">
                        <div class="input-group position-relative">
                            <input class="form-control" type="search" placeholder="Search" aria-label="Search"
                                id="searchInput" />
                            <span class="search-img-desktop position-absolute">
                                <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor"
                                    class="bi bi-search" viewBox="0 0 16 16">
                                    <path
                                        d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                </svg>
                            </span>
                        </div>
                    </form>
                    <div>
                        <button class="btn btn-outline-secondary rounded-2 fs-6" id="deleteSelected" type="submit">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                                class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                <path
                                    d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                            </svg>
                        </button>
                    </div>

                    <div>
                        <button type="button" class="btn btn-main btn-main text-white d-none d-lg-block ms-2"
                            id="addNewItemBtn">+ New Table</button>
                        <button class="btn btn-main bg-primary rounded-2 ms-2 text-white fs-6 d-block d-lg-none"
                            id="addNewItemBtnMobile">+</button>

                    </div>
                </div>
            </div>
            <div class="content-div table-responsive">
                <table class="table table-hover" id="itemTable">
                    <thead>
                        <tr>
                            <th scope="col">
                                <div class="form-check item-checkbox">
                                    <input class="form-check-input" type="checkbox" value="" id="selectAll">
                                    <label class="form-check-label" for="selectAll">
                                    </label>
                                </div>
                            </th>
                            <th scope="col">Name</th>
                            <th scope="col" class="text-center text-nowrap">Capacity</th>
                            <th scope="col" class="text-center text-nowrap">Status</th>
                            <th scope="col" class="text-center text-nowrap">Action</th>
                        </tr>
                    </thead>
                    <tbody id="GetTableList">
                        <!-- Tables loaded here via AJAX -->
                    </tbody>
                </table>
                <nav>
                    <div class=" d-flex justify-content-end align-items-center ">
                        <div class="pe-2">
                            <label for="pageSizeSelect">Items per page:</label>
                            <select id="pageSizeSelect" class="form-select d-inline-block w-auto">
                                <option value="2">2</option>
                                <option value="5" selected>5</option>
                                <option value="8">8</option>
                                <option value="10">10</option>
                            </select>
                        </div>
                        <div id="paginationControls" class="d-flex align-items-center">
                            <!-- Pagination controls will be dynamically added here -->
                        </div>
                    </div>
                </nav>
            </div>
        </div>
        <div class="category-backdrop"></div>
    </div>

</div>

<div id="AddSection">
    @* _AddSection partial View *@
</div>
<div id="addTableContainer">
    <!--  Add New Item Partial view will load here -->
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {

        let currentPage = 1;
        let pageSize = 5;
        let currentSectionId = 1;

        // Function to load items with pagination
        function loadTables(sectionId, page = 1, size = pageSize) {
            $.ajax({
                url: '@Url.Action("GetTables", "TableAndSection")',
                type: 'GET',
                data: { sectionId: sectionId, page: page, pageSize: size },
                success: function (result) {
                    $("#GetTableList").html(result);
                    currentPage = page;
                    currentSectionId = sectionId;
                    updatePaginationControls();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading items:", error);
                    $("#GetTableList").html("Failed to load items");
                }
            });
        }

        // Function to update pagination controls
        function updatePaginationControls() {
            const totalPages = parseInt($("#GetTableList").find("input[name='TotalPages']").val());
            const currentPage = parseInt($("#GetTableList").find("input[name='CurrentPage']").val());
            let paginationHtml = '';

            if (totalPages > 1) {
                paginationHtml += '<nav aria-label="Page navigation">';
                paginationHtml += '<ul class="pagination mb-0">';

                // Previous button
                paginationHtml += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link text-secondary" href="#" data-page="${currentPage - 1}"> < </a>
                </li>`;

                // Page numbers (simplified: show all pages)
                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link text-secondary" href="#" data-page="${i}">${i}</a>
                    </li>`;
                }

                // Next button
                paginationHtml += `<li class="page-item  ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link text-secondary" href="#" data-page="${currentPage + 1}"> > </a>
                </li>`;

                paginationHtml += '</ul></nav>';
            }

            $("#paginationControls").html(paginationHtml);

            // Attach click handlers to pagination links
            $("#paginationControls .page-link").on("click", function (e) {
                e.preventDefault();
                const page = $(this).data("page");
                if (page && page > 0 && page <= totalPages) {
                    loadTables(currentSectionId, page);
                }
            });
        }

        // Load sectoins and attach click handlers
        function loadSections() {
            $.ajax({
                url: '@Url.Action("GetSections", "TableAndSection")',
                type: 'GET',
                success: function (result) {
                    $("#sectionsContainer").html(result);
                    $(".section-link").on("click", function (e) {
                        e.preventDefault();
                        var sectionId = $(this).data("sections-id");
                        loadTables(sectionId, 1, pageSize);
                    });
                    attachEditSectionHandler();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading sections:", error);
                }
            });
        }


        // Search functionality with pagination
        // Search functionality with pagination
        $("#searchInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            $.ajax({
                url: '@Url.Action("SearchTables", "TableAndSection")',
                type: 'GET',
                data: { searchTerm: searchTerm, sectionId: currentSectionId, page: 1, pageSize: pageSize },
                success: function (response) {
                    $("#GetTableList").html(response);
                    updatePaginationControls();
                },
                error: function () {
                    toastr.error("Failed to search tables.");
                }
            });
        });

        // Page size change handler
        $("#pageSizeSelect").on("change", function () {
            pageSize = parseInt($(this).val());
            loadTables(currentSectionId, 1, pageSize);
        });



        $('#sectionsContainer').on('click', '.section-link', function () {
            $('#sectionsContainer .section-link').removeClass('active');
            $(this).addClass('active');

        });





        // Function to load the Add Category partial view and attach its form handler
        function loadAddSection() {
            $.ajax({
                url: '@Url.Action("AddNewSection", "TableAndSection")',
                type: 'GET',
                success: function (result) {
                    $("#AddSection").html(result);
                    attachAddSectionFormHandler();
                    $.validator.unobtrusive.parse("#addSectionForm");
                },
                error: function (xhr, status, error) {
                    console.error("Error loading Add Section form:", error);
                }
            });
        }



        // Attach submit handler to the Add Category form
        function attachAddSectionFormHandler() {
            $("#addSectionForm").on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    return;
                }
                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("AddNewSection", "TableAndSection")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // On success: hide the modal, show success toast, and refresh categories
                            @* var modalEl = document.getElementById('exampleModal12');
                            if (modalEl) {
                                var modal = bootstrap.Modal.getInstance(modalEl);
                                if (modal) {
                                    modal.hide();
                                }
                            } *@
                                $(".modal").hide();
                            $('.modal-backdrop').remove();
                            toastr.success("Section added successfully!");
                            loadSections();
                            loadAddSection();
                        } else {
                            // On error: show a single toastr error and ensure the modal stays open
                            toastr.error("Failed to add section: " + response.message);
                            var modalEl = document.getElementById('exampleModal12');
                            if (modalEl) {
                                var modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                                modal.show();
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding category:", error);
                        toastr.error("Error adding category. Please try again.");
                        var modalEl = document.getElementById('exampleModal12');
                        if (modalEl) {
                            var modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                            modal.show();
                        }
                    }
                });
            });
        }

        // Attach edit section button handler
        function attachEditSectionHandler() {
            $(".edit-category-btn").off('click').on("click", function (e) {
                e.preventDefault();
                var sectionId = $(this).data("sections-id");
                console.log("Clicked edit for category ID:", sectionId);

                $("#editModalView").html("");

                $.ajax({
                    url: '@Url.Action("EditSection", "TableAndSection")',
                    type: 'GET',
                    data: { id: sectionId },
                    cache: false,
                    success: function (data) {
                        console.log("Received data for category ID:", sectionId);
                        $("#editModalView").html(data);

                        var modalElement = document.getElementById('editModal');
                        if (modalElement) {
                            var editModal = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
                            editModal.show();
                            attachEditFormHandler(); // Attach form handler after modal is loaded
                        } else {
                            console.error("Modal element #editModal not found in DOM");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading edit partial view for ID " + sectionId + ":", error);
                    }
                });
            });
        }

        // Attach edit form submission handler
        function attachEditFormHandler() {
            $("#editSectionForm").off('submit').on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) { // Check client-side validation
                    return;
                }
                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("UpdateSection", "TableAndSection")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // On success: close the modal, show success toast, and reload categories
                            var modalElement = document.getElementById('editModal');
                            var editModal = bootstrap.Modal.getInstance(modalElement);
                            if (editModal) {
                                editModal.hide();
                            }
                            toastr.success(response.message);
                            loadSections();
                        } else {
                            // On error: show a single toastr error message.
                            toastr.error(response.message);

                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating category:", error);
                        toastr.error("Error updating category. Please try again.");
                    }
                });
            });
        }

        // Ensure modal backdrop is removed when any modal is hidden
        $('.modal').on('hidden.bs.modal', function () {
            $('.modal-backdrop').remove();
        });


        $("#addNewItemBtn, #addNewItemBtnMobile").on("click", function () {
            $.ajax({
                url: '@Url.Action("AddNewTable", "TableAndSection")',
                type: 'GET',
                success: function (result) {
                    $("#addTableContainer").html(result);

                    var modal = new bootstrap.Modal(document.getElementById("exampleModal2"));
                    modal.show();

                },
                error: function () {
                    toastr.error("Failed to load add item form.");
                }
            });
        });

        // Simplified delete AJAX: attach handler to the delete form submission
        $(document).on('submit', '.delete-category-form', function (e) {
            e.preventDefault();
            var form = $(this);
            var sectionId = form.data('sections-id');

            $.ajax({
                url: '@Url.Action("Delete", "TableAndSection")',
                type: 'POST',
                data: form.serialize(),
                success: function (response) {
                    if (response.success) {
                        // Retrieve the delete modal element
                        var modalEl = document.getElementById('deletemodal-' + sectionId);
                        if (modalEl) {
                            var modal = bootstrap.Modal.getInstance(modalEl);
                            if (modal) {
                                modal.hide();
                            }
                        }
                        // Explicitly remove any lingering modal backdrop
                        $('.modal-backdrop').remove();

                        toastr.success("Category deleted successfully!");
                        // Refresh the category list
                        loadSections();
                        // Optionally, load items for the first category after a short delay
                        setTimeout(function () {
                            var firstCategory = $(".section-link").first();
                            if (firstCategory.length) {
                                loadTables(firstCategory.data("sections-id"));
                            }
                        }, 300);
                    } else {
                        toastr.error("Error: " + response.message);
                    }
                },
                error: function () {
                    toastr.error("Failed to delete category. Please try again.");
                }
            });
        });


        $("#selectAll").click(function () {
            $(".itemCheckbox").prop("checked", this.checked);
        });

        $("#deleteSelected").click(function () {
            var selectedIds = $(".itemCheckbox:checked").map(function () {
                return $(this).val();
            }).get();

            if (selectedIds.length === 0) {
                toastr.warning("Please select at least one table to delete.");
                return;
            }

            if (!confirm("Are you sure you want to delete the selected tables?")) {
                return;
            }

            $.ajax({
                url: "/TableAndSection/DeleteTables",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(selectedIds),
                success: function (response) {
                    if (response.success) {
                        response.deletedIds.forEach(id => {
                            $("tr[data-id='" + id + "']").remove();
                        });
                        toastr.success(response.message);
                        loadTables(currentSectionId, currentPage, pageSize); // Refresh table list
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error("An error occurred while deleting tables.");
                }
            });
        });

        loadSections();
        loadTables(1);
        loadAddSection();
    });

</script>

<script>
    document.getElementById("categoryToggle").addEventListener("click", function () {
        var categorySection = document.getElementById("category-section");
        var contentSection = document.getElementById("content-section");
        var toggleContainer = document.getElementById("toggle-container");

        if (window.innerWidth <= 991) {
            categorySection.classList.toggle("category-visible");
            toggleContainer.classList.toggle("toggle-move");
        } else {
            if (categorySection.style.display === "none" || categorySection.classList.contains("d-none")) {
                categorySection.style.display = "block";
                categorySection.classList.remove("d-none");
                if (categorySection.classList.contains("col-xl-3")) {
                    contentSection.classList.remove("col-12");
                    contentSection.classList.add("col-xl-9", "col-lg-8");
                } else if (categorySection.classList.contains("col-xl-4")) {
                    contentSection.classList.remove("col-12");
                    contentSection.classList.add("col-xl-8", "col-lg-8");
                }
            } else {
                categorySection.style.display = "none";
                categorySection.classList.add("d-none");
                contentSection.classList.remove("col-xl-9", "col-lg-8", "col-xl-8");
                contentSection.classList.add("col-12");
            }
        }
    });
</script>

<style>
    .section-link.active {
        color: rgb(63, 137, 216);
    font-size: 1.2rem;
    font-weight: 700;
        @* border-radius: 5px; *@
         @* background-color: rgb(119, 163, 209); *@
        
    }

    .category-option {
        padding: 10px;
        cursor: pointer;
    }
</style>