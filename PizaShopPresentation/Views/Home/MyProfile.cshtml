@model PizzaShopRepository.ViewModels.MyProfile;

@{
    ViewData["Title"] = "My Profile";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
    crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<div class="Users-content mt-0 p-xl-5 p-lg-4 p-md-4 p-sm-4 p-4">
    <div class="d-flex align-items-center justify-content-between my-2 z-0">
        <div>
            <h2 class="fw-bolder fs-2 page-text me-2">My Profile</h2>
        </div>
    </div>

    <div class="card shadow-lg content-div rounded-3 shadow p-0">
        <div class="profile-header"></div>
        <div class="card-body profile-container">
            <form id="profileForm" method="post" asp-controller="Home" asp-action="UpdateProfile"
                enctype="multipart/form-data">
                <div class="mt-1 d-flex justify-content-between">
                    <div class="d-flex">
                        <div class="position-relative">
                            <img id="profilePic"
                                src="@(!string.IsNullOrEmpty(Model.ProfileImage) ? Model.ProfileImage : "/images/Default_pfp.svg.png")"
                                class="profile-pic" alt="@Model.FirstName @Model.LastName profile image"
                                style="max-height: 100px; aspect-ratio: 1; border-radius: 50%; object-fit: cover; border: 3px solid #fff;" />
                            <label for="profileImageUpload" class="camera-icon position-absolute"
                                style="bottom: 5px; right: 5px; background-color: #fff; border-radius: 50%; padding: 5px; cursor: pointer;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                    class="bi bi-camera" viewBox="0 0 16 16">
                                    <path
                                        d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A3 3 0 0 0 9.828 3h1.344a3 3 0 0 0 2.121.879l.83.828A3 3 0 0 0 13.828 5H15a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.828 2H6.172a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z" />
                                    <path
                                        d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0-1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z" />
                                </svg>
                            </label>
                            <input type="file" id="profileImageUpload" name="ImageFile" accept="image/*" asp-for="ImageFile"
                                class="d-none" />
                            <input type="hidden" id="removeImage" name="RemoveImage" value="false" />
                            @if (!string.IsNullOrEmpty(Model.ProfileImage))
                            {
                                <div class="mt-2">
                                    <button type="button" id="removeImageButton" class="btn btn-sm btn bg-white rounded-pill"
                                        style="margin-bottom: 12px;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="currentColor"
                                            class="bi bi-trash3" viewBox="0 0 16 16">
                                            <path
                                                d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 0 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                        </svg>
                                    </button>
                                </div>
                            }
                        </div>
                        <span>
                            <h5 class="mt-4 text-black fw-bolder">  @Model.FirstName @Model.LastName</h5>
                            <p class="fw-bold">@if (@Model.Role == "super_admin")
                                {
                                    <span>Admin</span>
                                }
                                else if (@Model.Role == "account_manager")
                                {
                                    <span>Account Manager</span>
                                }
                                else if (@Model.Role == "chef")
                                {
                                    <span>Chef</span>
                                }
                            </p>
                        </span>
                    </div>
                    <div>
                        <p class="mt-4">@Model.Email</p>
                    </div>
                </div>

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control floatingInput" id="firstName" name="FirstName"
                                value="@Model.FirstName" placeholder="First Name" asp-for="FirstName">
                            <label asp-for="FirstName">First Name</label>
                            <span asp-validation-for="FirstName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="lastName" name="LastName"
                                placeholder="Last Name" value="@Model.LastName" asp-for="LastName">
                            <label asp-for="LastName">Last Name</label>
                            <span asp-validation-for="LastName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="userName" name="Username"
                                placeholder="User Name" value="@Model.Username" asp-for="Username">
                            <label asp-for="Username">User Name</label>
                            <span asp-validation-for="Username" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="number" class="form-control" id="phone" name="Phone" placeholder="Phone"
                                value="@Model.Phone" asp-for="Phone">
                            <label asp-for="Phone">Phone</label>
                            <span asp-validation-for="Phone" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="selectCountry" name="Country" asp-for="Country">
                                <option value="" selected>Select Country</option>
                            </select>
                            <label asp-for="Country">Country</label>
                            <span asp-validation-for="Country" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="selectState" name="State" asp-for="State">
                                <option value="" selected>Select State</option>
                            </select>
                            <label asp-for="State">State</label>
                            <span asp-validation-for="State" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="selectCity" name="City" asp-for="City">
                                <option value="" selected>Select City</option>
                            </select>
                            <label asp-for="City">City</label>
                            <span asp-validation-for="City" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="address" name="Address" placeholder="Address"
                                value="@Model.Address" asp-for="Address">
                            <label asp-for="Address">Address</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input type="number" class="form-control" id="zipcode" name="Zipcode" placeholder="Zipcode"
                                value="@Model.Zipcode" asp-for="Zipcode">
                            <label asp-for="Zipcode">Zipcode</label>
                            <span asp-validation-for="Zipcode" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <button type="submit" class="btn btn-main text-white me-2">Update</button>
                    <a type="button" class="btn btn-secondary" asp-action="Dashboard" asp-controller="Home">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let countryDropdown = document.getElementById("selectCountry");
        let stateDropdown = document.getElementById("selectState");
        let cityDropdown = document.getElementById("selectCity");
        let profileImageUpload = document.getElementById("profileImageUpload");
        let profilePic = document.getElementById("profilePic");
        let removeImageButton = document.getElementById("removeImageButton");
        let removeImageInput = document.getElementById("removeImage");

        let selectedCountry = "@Model.Country";
        let selectedState = "@Model.State";
        let selectedCity = "@Model.City";

        // Load Countries
        fetch("https://restcountries.com/v3.1/all")
            .then(response => response.json())
            .then(data => {
                data.forEach(country => {
                    let option = document.createElement("option");
                    option.value = country.name.common;
                    option.textContent = country.name.common;
                    if (country.name.common === selectedCountry) {
                        option.selected = true;
                    }
                    countryDropdown.appendChild(option);
                });

                if (selectedCountry) {
                    loadStates(selectedCountry);
                }
            })
            .catch(error => console.error("Error fetching countries:", error));

        // Load States based on Selected Country
        function loadStates(country) {
            fetch("https://countriesnow.space/api/v0.1/countries/states", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ country: country })
            })
                .then(response => response.json())
                .then(data => {
                    stateDropdown.innerHTML = '<option value="">Select State</option>';
                    data.data.states.forEach(state => {
                        let option = document.createElement("option");
                        option.value = state.name;
                        option.textContent = state.name;
                        if (state.name === selectedState) {
                            option.selected = true;
                        }
                        stateDropdown.appendChild(option);
                    });

                    if (selectedState) {
                        loadCities(selectedCountry, selectedState);
                    }
                })
                .catch(error => console.error("Error fetching states:", error));
        }

        // Load Cities based on Selected State
        function loadCities(country, state) {
            fetch("https://countriesnow.space/api/v0.1/countries/state/cities", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ country: country, state: state })
            })
                .then(response => response.json())
                .then(data => {
                    cityDropdown.innerHTML = '<option value="">Select City</option>';
                    data.data.forEach(city => {
                        let option = document.createElement("option");
                        option.value = city;
                        option.textContent = city;
                        if (city === selectedCity) {
                            option.selected = true;
                        }
                        cityDropdown.appendChild(option);
                    });
                })
                .catch(error => console.error("Error fetching cities:", error));
        }

        // Change events
        countryDropdown.addEventListener("change", function () {
            loadStates(this.value);
            stateDropdown.value = "";
            cityDropdown.value = "";
        });

        stateDropdown.addEventListener("change", function () {
            loadCities(countryDropdown.value, this.value);
            cityDropdown.value = "";
        });

        // Image upload preview
        profileImageUpload.addEventListener("change", function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePic.src = e.target.result;
                    removeImageInput.value = "false"; // Reset remove image flag
                    if (removeImageButton) {
                        removeImageButton.style.display = "block"; // Show remove button
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // Trigger file input click when camera icon is clicked
        @* document.querySelector(".camera-icon").addEventListener("click", function () {
            profileImageUpload.click();
        }); *@

        // Handle remove image button
        if (removeImageButton) {
            removeImageButton.addEventListener("click", function () {
                profilePic.src = "/images/Default_pfp.svg.png";
                profileImageUpload.value = ""; // Clear file input
                removeImageInput.value = "true"; // Set remove image flag
                this.style.display = "none"; // Hide remove button
            });
        }

        // Ensure form submission includes file
        document.getElementById("profileForm").addEventListener("submit", function (event) {
            if (profileImageUpload.files.length > 0) {
                removeImageInput.value = "false"; // Ensure remove flag is false if a file is selected
            }
        });
    });

    $(document).ready(function () {
        toastr.options = {
            "positionClass": "toast-top-right",
            "progressBar": true,
            "timeOut": "5000"
        };

        @if (TempData["SuccessMessage"] != null)
        {
            <text>toastr.success('@TempData["SuccessMessage"]');</text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>toastr.error('@TempData["ErrorMessage"]');</text>
        }
    });
</script>

<style>
    label.camera-icon.position-absolute {
        bottom: 47px !important;
        right: 9px !important;
        background-color: #fff !important;
        border-radius: 50% !important;
        padding-inline: 5px !important;
        padding-top: 0px !important;
        padding-bottom: 0px !important;
        cursor: pointer !important;
    }
</style>