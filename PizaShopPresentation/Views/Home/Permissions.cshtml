@using System.Security.Claims
@model PizzaShopRepository.ViewModels.RolePermissionVM

@{
    ViewData["Title"] = "Permissions";
}

<div class="Users-content mt-0 p-xl-5 p-lg-4 p-md-4 p-sm-4 p-4">
    <div class="d-flex align-items-center justify-content-between my-2">
        <div class="fw-bolder fs-2 page-text">Permissions</div>
        <div class="d-flex">
            <a asp-controller="Home" asp-action="Roles">
                <button class="btn btn-main bg-primary rounded-2 ms-1 text-white fs-6 d-none d-lg-block" type="button">
                    Back
                </button>
            </a>
            <a asp-controller="Home" asp-action="Roles">
                <button class="btn btn-main bg-primary rounded-2 ms-1 text-white fs-6 d-block d-lg-none" type="button">
                    < </button>
            </a>
        </div>
    </div>

    <form id="permissionsForm" asp-controller="Home" asp-action="UpdatePermissions" method="post">
        <input type="hidden" asp-for="RoleId" />
        <input type="hidden" id="changedPermissions" name="changedPermissions" />
        <div class="row my-3">
            <div class="col-12 col-lg-7">
                <div class="form-floating">
                    <input type="text" class="form-control w-75" id="roleName" 
                           value="@(Model.RoleName?.ToLower() == "super_admin" ? "Super Admin" : 
                                   Model.RoleName?.ToLower() == "account_manager" ? "Account Manager" : 
                                   Model.RoleName?.ToLower() == "chef" ? "Chef" : Model.RoleName)" 
                           disabled>
                    <label for="roleName">Role</label>
                </div>
            </div>
        </div>

        <div class="row content-div rounded-2 shadow py-2">
            <div class="content-div table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">
                                <div class="form-check">
                                    <input class="form-check-input select-all-checkbox" type="checkbox" id="selectAll">
                                    <label class="form-check-label" for="selectAll"></label>
                                </div>
                            </th>
                            <th scope="col">Permissions</th>
                            <th scope="col" class="text-nowrap">Can View</th>
                            <th scope="col" class="text-nowrap">Can Add/Edit</th>
                            <th scope="col" class="text-nowrap">Can Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Permissions.Count; i++)
                        {
                            <tr>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input permission-checkbox" type="checkbox"
                                               asp-for="Permissions[i].IsSelected" checked="@Model.Permissions[i].IsSelected"
                                               data-index="@i">
                                    </div>
                                    <input type="hidden" asp-for="Permissions[i].PermissionId" />
                                </td>
                                <td>@Model.Permissions[i].PermissionName</td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input can-view" type="checkbox" asp-for="Permissions[i].CanView"
                                               data-index="@i" style="width: 50px; height: 30px;">
                                    </div>
                                </td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input can-add-edit" type="checkbox" asp-for="Permissions[i].CanAddEdit"
                                               data-index="@i" style="width: 50px; height: 30px;">
                                    </div>
                                </td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input can-delete" type="checkbox" asp-for="Permissions[i].CanDelete"
                                               data-index="@i" style="width: 50px; height: 30px;">
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-grid gap-2 d-flex justify-content-sm-end flex-sm-row flex-column">
                @if (User.IsInRole("super_admin"))
                {
                    @if (Model.RoleName != "super_admin")
                    {
                        <button class="btn btn-main text-white me-md-2" type="button" id="saveButton">Save</button>
                    }
                }
                else if (User.IsInRole("account_manager"))
                {
                    @if (Model.RoleName == "chef")
                    {
                        <button class="btn btn-main text-white me-md-2" type="button" id="saveButton">Save</button>
                    }
                }
                <a asp-controller="Home" asp-action="Roles" class="btn btn-outline">Cancel</a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectAll = document.getElementById('selectAll');
            const permissionCheckboxes = document.querySelectorAll('.permission-checkbox');
            const canDeleteCheckboxes = document.querySelectorAll('.can-delete');
            const canAddEditCheckboxes = document.querySelectorAll('.can-add-edit');
            const canViewCheckboxes = document.querySelectorAll('.can-view');
            const saveButton = document.getElementById('saveButton');
            const changedPermissionsInput = document.getElementById('changedPermissions');
            let changedPermissions = [];

            // Function to update the select all checkbox state with indeterminate support
            function updateSelectAllState() {
                const totalPermissions = permissionCheckboxes.length;
                const checkedPermissions = Array.from(permissionCheckboxes).filter(cb => cb.checked).length;

                if (checkedPermissions === totalPermissions) {
                    // All permissions are selected
                    selectAll.checked = true;
                    selectAll.indeterminate = false;
                } else if (checkedPermissions > 0) {
                    // Some, but not all, permissions are selected
                    selectAll.checked = true;
                    selectAll.indeterminate = true;
                } else {
                    // No permissions are selected
                    selectAll.checked = false;
                    selectAll.indeterminate = false;
                }
            }

            // Function to toggle related checkboxes based on permission-checkbox
            function togglePermissionDependencies(index, isEnabled) {
                canViewCheckboxes[index].disabled = !isEnabled;
                canAddEditCheckboxes[index].disabled = !isEnabled;
                canDeleteCheckboxes[index].disabled = !isEnabled;
            }

            // Initial check on page load
            permissionCheckboxes.forEach((checkbox, index) => {
                togglePermissionDependencies(index, checkbox.checked);
            });
            updateSelectAllState(); // Set initial select all state

            // Track initial states
            const initialStates = Array.from(permissionCheckboxes).map((checkbox, index) => ({
                index: index,
                isSelected: checkbox.checked,
                canView: canViewCheckboxes[index].checked,
                canAddEdit: canAddEditCheckboxes[index].checked,
                canDelete: canDeleteCheckboxes[index].checked
            }));

            // Handle change in permission-checkbox
            permissionCheckboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    togglePermissionDependencies(index, this.checked);
                    updateSelectAllState(); // Update select all state
                    const initialState = initialStates.find(s => s.index === index);
                    if (this.checked !== initialState.isSelected) {
                        changedPermissions.push({
                            index: index,
                            isSelected: this.checked,
                            canView: canViewCheckboxes[index].checked,
                            canAddEdit: canAddEditCheckboxes[index].checked,
                            canDelete: canDeleteCheckboxes[index].checked
                        });
                    } else {
                        changedPermissions = changedPermissions.filter(cp => cp.index !== index);
                    }
                });
            });

            // Handle changes in canView, canAddEdit, and canDelete
            [canViewCheckboxes, canAddEditCheckboxes, canDeleteCheckboxes].forEach(checkBoxes => {
                checkBoxes.forEach((checkbox, index) => {
                    checkbox.addEventListener('change', function () {
                        const initialState = initialStates.find(s => s.index === index);
                        if (
                            this.checked !== initialState.canView ||
                            this.checked !== initialState.canAddEdit ||
                            this.checked !== initialState.canDelete
                        ) {
                            const existingChange = changedPermissions.find(cp => cp.index === index);
                            if (existingChange) {
                                existingChange.canView = canViewCheckboxes[index].checked;
                                existingChange.canAddEdit = canAddEditCheckboxes[index].checked;
                                existingChange.canDelete = canDeleteCheckboxes[index].checked;
                            } else {
                                changedPermissions.push({
                                    index: index,
                                    isSelected: permissionCheckboxes[index].checked,
                                    canView: canViewCheckboxes[index].checked,
                                    canAddEdit: canAddEditCheckboxes[index].checked,
                                    canDelete: canDeleteCheckboxes[index].checked
                                });
                            }
                        }
                    });
                });
            });

            // Select All functionality
            selectAll.addEventListener('change', function () {
                permissionCheckboxes.forEach((checkbox, index) => {
                    checkbox.checked = selectAll.checked;
                    togglePermissionDependencies(index, checkbox.checked);
                    const initialState = initialStates.find(s => s.index === index);
                    if (checkbox.checked !== initialState.isSelected) {
                        changedPermissions.push({
                            index: index,
                            isSelected: checkbox.checked,
                            canView: canViewCheckboxes[index].checked,
                            canAddEdit: canAddEditCheckboxes[index].checked,
                            canDelete: canDeleteCheckboxes[index].checked
                        });
                    } else {
                        changedPermissions = changedPermissions.filter(cp => cp.index !== index);
                    }
                });
                updateSelectAllState(); // Update select all state
            });

            // Dependency logic
            canDeleteCheckboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    if (this.checked) {
                        canViewCheckboxes[index].checked = true;
                        canAddEditCheckboxes[index].checked = true;
                    }
                    const initialState = initialStates.find(s => s.index === index);
                    if (this.checked !== initialState.canDelete) {
                        updateChangedPermissions(index);
                    }
                });
            });

            canAddEditCheckboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    if (this.checked) {
                        canViewCheckboxes[index].checked = true;
                    }
                    const initialState = initialStates.find(s => s.index === index);
                    if (this.checked !== initialState.canAddEdit) {
                        updateChangedPermissions(index);
                    }
                });
            });

            canViewCheckboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    if (!this.checked) {
                        canAddEditCheckboxes[index].checked = false;
                        canDeleteCheckboxes[index].checked = false;
                    }
                    const initialState = initialStates.find(s => s.index === index);
                    if (this.checked !== initialState.canView) {
                        updateChangedPermissions(index);
                    }
                });
            });

            function updateChangedPermissions(index) {
                const existingChange = changedPermissions.find(cp => cp.index === index);
                if (existingChange) {
                    existingChange.canView = canViewCheckboxes[index].checked;
                    existingChange.canAddEdit = canAddEditCheckboxes[index].checked;
                    existingChange.canDelete = canDeleteCheckboxes[index].checked;
                } else {
                    changedPermissions.push({
                        index: index,
                        isSelected: permissionCheckboxes[index].checked,
                        canView: canViewCheckboxes[index].checked,
                        canAddEdit: canAddEditCheckboxes[index].checked,
                        canDelete: canDeleteCheckboxes[index].checked
                    });
                }
            }

            // Save button click handler
            saveButton.addEventListener('click', function () {
                if (changedPermissions.length > 0) {
                    const formData = new FormData(document.getElementById('permissionsForm'));
                    formData.set('changedPermissions', JSON.stringify(changedPermissions));

                    fetch('@Url.Action("UpdatePermissions", "Home")', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '@Url.Action("Roles", "Home")';
                        } else {
                            console.error('Update failed:', data.message);
                        }
                    })
                    .catch(error => console.error('Error:', error));
                }
            });
        });
    </script>
}