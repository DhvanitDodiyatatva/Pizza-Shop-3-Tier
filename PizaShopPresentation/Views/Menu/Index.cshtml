@{
    ViewData["Title"] = "Menu";
}
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


<div class="Users-content mt-0 p-xl-5 p-lg-4 p-md-4 p-sm-4 p-4">
    <div class="d-flex align-items-center justify-content-between my-2">
        <div>
            <div class="fw-bolder fs-2 page-text">Menu</div>
        </div>
        <div class="d-flex">
            <a asp-controller="Menu" asp-action="Index"><button
                    class="btn btn-main bg-primary rounded-2 ms-1 text-white fs-6 d-none d-lg-block"
                    type="submit">Back</button></a>
            <a asp-controller="Menu" asp-action="Index"><button
                    class="btn btn-main bg-primary rounded- ms-1 text-white fs-6 d-block d-lg-none" type="submit">
                    < </button></a>
        </div>
    </div>
    <div class="row mb-3 upper-div rounded-2 shadow py-3 d-flex">
        <ul class="nav nav-underline">
            <li class="nav-item">
                <a class="nav-link custom-tag mx-3 active" id="item-tab" data-bs-toggle="tab"
                    data-bs-target="#item-tab-pane" type="button" role="tab" aria-controls="item-tab-pane"
                    aria-selected="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                        class="bi bi-list-ul" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                            d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                    </svg> Items
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link custom-tag mx-3 text-decoration-none text-black" id="modifier-tab"
                    data-bs-toggle="tab" data-bs-target="#modifier-tab-pane" type="button" role="tab"
                    aria-controls="modifier-tab-pane" aria-selected="false">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                        class="bi bi-ui-checks-grid" viewBox="0 0 16 16">
                        <path
                            d="M2 10h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1m9-9h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-3a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1m0 9a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1zm0-10a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM2 9a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2zm7 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-3a2 2 0 0 1-2-2zM0 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5.354.854a.5.5 0 1 0-.708-.708L3 3.793l-.646-.647a.5.5 0 1 0-.708.708l1 1a.5.5 0 0 0 .708 0z" />
                    </svg> Modifiers
                </a>
            </li>
        </ul>
    </div>
    <div class="row content-div rounded-2 shadow">
        <div class="tab-content w-100">
            <!-- Item Tab -->
            <div class="tab-pane fade show active" id="item-tab-pane" role="tabpanel" aria-labelledby="item-tab">
                <div class="row">
                    <div id="category-section" class="col-xl-3 col-lg-4 col-md-12 col-12 ps-3 pe-0 category-section"
                        style="background: rgba(215,237,255,1);">
                        <div class="row d-flex py-3 pe-3">
                            <div class="d-flex align-items-center fw-bold justify-content-between page-text fs-5">
                                Category
                                <button type="button" class="btn bg-white btn-outline-dark text-black"
                                    data-bs-toggle="modal" data-bs-target="#exampleModal12" data-bs-whatever="">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor"
                                        class="bi bi-plus-lg" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd"
                                            d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div style="overflow: auto; height: 50dvh;" class="custom-scrollbar" id="categoriesContainer">
                            <!-- Categories loaded here via AJAX -->
                        </div>
                    </div>
                    <!-- Content Section -->
                    <div id="content-section" class="col-xl-9 col-lg-8 col-md-12 col-12 p-2">
                        <div class="row menu-content">
                            <div class="col d-flex align-items-center" id="toggle-container">
                                <div>
                                    <svg id="categoryToggle" xmlns="http://www.w3.org/2000/svg" width="30" height="30"
                                        fill="currentColor" class="bi bi-list-ul me-2" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd"
                                            d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                                    </svg>
                                </div>
                                <div class="fw-bolder fs-5 page-text">Items</div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="d-flex justify-content-end">
                                <form class="d-flex align-items-center me-2 rounded-end-3" role="search"
                                    id="searchForm">
                                    <div class="input-group position-relative">
                                        <input class="form-control" type="search" placeholder="Search"
                                            aria-label="Search" id="searchInput" />
                                        <span class="search-img-desktop position-absolute">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21"
                                                fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                                <path
                                                    d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                            </svg>
                                        </span>
                                    </div>
                                </form>
                                <div>
                                    <button class="btn btn-outline-secondary rounded-2 fs-6" id="deleteSelected"
                                        type="submit">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"
                                            fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                            <path
                                                d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                        </svg>
                                    </button>
                                </div>

                                <div>
                                    <button type="button" class="btn btn-main btn-primary d-none d-lg-block ms-2"
                                        id="addNewItemBtn">+ New Item</button>
                                    <button
                                        class="btn btn-main bg-primary rounded-2 ms-2 text-white fs-6 d-block d-lg-none"
                                        id="addNewItemBtnMobile">+</button>

                                </div>
                            </div>
                        </div>
                        <div class="content-div table-responsive">
                            <table class="table table-hover" id="itemTable">
                                <thead>
                                    <tr>
                                        <th scope="col">
                                            <div class="form-check item-checkbox">
                                                <input class="form-check-input" type="checkbox" value="" id="selectAll">
                                                <label class="form-check-label" for="selectAll">
                                                </label>
                                            </div>
                                        </th>
                                        <th scope="col">Name</th>
                                        <th scope="col" class="text-center text-nowrap">Item Type</th>
                                        <th scope="col" class="text-center text-nowrap">Rate</th>
                                        <th scope="col" class="text-center text-nowrap">Quantity</th>
                                        <th scope="col" class="text-center text-nowrap">Available</th>
                                        <th scope="col" class="text-center text-nowrap">Action</th>
                                    </tr>
                                </thead>
                                <tbody id="GetItemList">
                                    <!-- Items loaded here via AJAX -->
                                </tbody>
                            </table>
                            <nav>
                                <div class=" d-flex justify-content-end align-items-center ">
                                    <div class="pe-2">
                                        <label for="pageSizeSelect">Items per page:</label>
                                        <select id="pageSizeSelect" class="form-select d-inline-block w-auto">
                                            <option value="2">2</option>
                                            <option value="5" selected>5</option>
                                            <option value="8">8</option>
                                            <option value="10">10</option>
                                        </select>
                                    </div>
                                    <div id="paginationControls" class="d-flex align-items-center">
                                        <!-- Pagination controls will be dynamically added here -->
                                    </div>
                                </div>
                            </nav>
                        </div>
                    </div>
                    <div class="category-backdrop"></div>
                </div>
            </div>



            <!-- Modifier Tab -->
            <div class="tab-pane fade" id="modifier-tab-pane" role="tabpanel" aria-labelledby="modifier-tab">
                <div class="row ">
                    <div id="modifier-section" class="col-xl-3 col-lg-4 col-md-12 col-12 ps-3 pe-0 modifier-section"
                        style="background: rgba(215,237,255,1);">
                        <div class="row d-flex py-3 pe-3">
                            <div class="d-flex align-items-center fw-bold justify-content-between page-text fs-5">
                                Modifier Group
                                <button type="button" class="btn bg-white btn-outline-dark text-black"
                                    id="addModifierGroupBtn">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor"
                                        class="bi bi-plus-lg" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd"
                                            d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                                    </svg>
                                </button>

                            </div>
                        </div>
                        <div style="overflow: auto; height: 50dvh;" class="custom-scrollbar" id="ModifierGroupList">
                            <!-- ModifierGroups loaded here via AJAX -->
                        </div>
                    </div>
                    <!-- Modifier Content Section -->
                    <div id="modifier-content-section" class="col-xl-9 col-lg-8 col-md-12 col-12 p-2">
                        <div class="row menu-content">
                            <div class="col d-flex align-items-center" id="modifier-toggle-container">
                                <div>
                                    <svg id="modifierToggle" xmlns="http://www.w3.org/2000/svg" width="30" height="30"
                                        fill="currentColor" class="bi bi-list-ul me-2" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd"
                                            d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                                    </svg>
                                </div>
                                <div class="fw-bolder fs-5 page-text">Modifiers</div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="d-flex justify-content-end">
                                <form class="d-flex align-items-center me-2 rounded-end-3" role="search">
                                    <div class="input-group position-relative">
                                        <input class="form-control" type="search" placeholder="Search"
                                            aria-label="Search" id="searchModifierInput" />
                                        <span class="search-img-desktop position-absolute">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21"
                                                fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                                <path
                                                    d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                            </svg>
                                        </span>
                                    </div>
                                </form>
                                <div>
                                    <button class="btn btn-outline-secondary rounded-2 fs-6"
                                        id="deleteSelectedModifiers" type="button">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"
                                            fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                            <path
                                                d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                        </svg>
                                    </button>
                                </div>
                                <div>
                                    <button type="button" class="btn btn-main btn-primary d-none d-lg-block ms-2"
                                        id="addNewModifierBtn">+
                                        New Modifier</button>
                                    <button
                                        class="btn btn-main bg-primary rounded-2 ms-2 text-white fs-6 d-block d-lg-none"
                                        type="button" id="addNewModifierMobileBtn">+</button>

                                </div>
                            </div>
                        </div>

                        <div id=" GetModifierList" class="GetModifierList">
                            <!--  ModifierList Partial view will load here -->
                        </div>
                    </div>
                    <div class="category-backdrop"></div>
                </div>
            </div>



        </div>
    </div>
</div>
<div id="AddCategory">
    @* _AddCategory partial View *@
</div>
<div id="addItemContainer">
    <!--  Add New Item Partial view will load here -->
</div>

<div id="addModifierContainer">
    <!-- Add Modifier Partial View will load here -->
</div>
<div id="editModifierContainer">
    <!-- Edit Modifier Partial View will load here -->
</div>

<div id="addModifierGroupContainer">
    <!-- Add Modifier Group Partial View will load here -->
</div>
<div id="editModifierGroupContainer">
    <!-- Edit Modifier Group Partial View will load here -->
</div>
<div id="selectModifiersContainer">
    <!-- Select Existing Modifiers Partial View will load here -->
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {

        let currentPage = 1;
        let pageSize = 5;
        let currentCategoryId = 1;
        let currentModifierGroupId = 1;

        // Function to load items with pagination
        function loadItems(categoryId, page = 1, size = pageSize) {
            $.ajax({
                url: '@Url.Action("GetItems", "Menu")',
                type: 'GET',
                data: { categoryId: categoryId, page: page, pageSize: size },
                success: function (result) {
                    $("#GetItemList").html(result);
                    currentPage = page;
                    currentCategoryId = categoryId;
                    updatePaginationControls();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading items:", error);
                    $("#GetItemList").html("Failed to load items");
                }
            });
        }

        // Function to update pagination controls
        function updatePaginationControls() {
            const totalPages = parseInt($("#GetItemList").find("input[name='TotalPages']").val());
            const currentPage = parseInt($("#GetItemList").find("input[name='CurrentPage']").val());
            let paginationHtml = '';

            if (totalPages > 1) {
                paginationHtml += '<nav aria-label="Page navigation">';
                paginationHtml += '<ul class="pagination mb-0">';

                // Previous button
                paginationHtml += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link text-secondary" href="#" data-page="${currentPage - 1}"> < </a>
                </li>`;

                // Page numbers (simplified: show all pages)
                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link text-secondary" href="#" data-page="${i}">${i}</a>
                    </li>`;
                }

                // Next button
                paginationHtml += `<li class="page-item  ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link text-secondary" href="#" data-page="${currentPage + 1}"> > </a>
                </li>`;

                paginationHtml += '</ul></nav>';
            }

            $("#paginationControls").html(paginationHtml);

            // Attach click handlers to pagination links
            $("#paginationControls .page-link").on("click", function (e) {
                e.preventDefault();
                const page = $(this).data("page");
                if (page && page > 0 && page <= totalPages) {
                    loadItems(currentCategoryId, page);
                }
            });
        }

        // Load categories and attach click handlers
        function loadCategories() {
            $.ajax({
                url: '@Url.Action("GetCategories", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#categoriesContainer").html(result);
                    $(".category-link").on("click", function (e) {
                        e.preventDefault();
                        var categoryId = $(this).data("category-id");
                        loadItems(categoryId, 1, pageSize);
                    });
                    attachEditCategoryHandler();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading categories:", error);
                }
            });
        }

        // Search functionality with pagination
        $("#searchInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            $.ajax({
                url: '@Url.Action("SearchItems", "Menu")',
                type: 'GET',
                data: { searchTerm: searchTerm, page: 1, pageSize: pageSize },
                success: function (response) {
                    $("#GetItemList").html(response);
                    currentCategoryId = 0; // Reset category for search
                    updatePaginationControls();
                },
                error: function () {
                    toastr.error("Failed to search items.");
                }
            });
        });

        // Page size change handler
        $("#pageSizeSelect").on("change", function () {
            pageSize = parseInt($(this).val());
            loadItems(currentCategoryId, 1, pageSize);
        });



        $('#item-tab-pane #categoriesContainer').on('click', '.category-option', function () {
            $('#item-tab-pane #categoriesContainer .category-option').removeClass('active');
            $(this).addClass('active');

        });

        $('#modifier-tab-pane #ModifierGroupList').on('click', '.category-option', function () {
            $('#modifier-tab-pane #ModifierGroupList .category-option').removeClass('active');
            $(this).addClass('active');

        });




        // Function to load the Add Category partial view and attach its form handler
        function loadAddCategory() {
            $.ajax({
                url: '@Url.Action("AddNewCategory", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#AddCategory").html(result);
                    attachAddCategoryFormHandler();
                    $.validator.unobtrusive.parse("#addCategoryForm");
                },
                error: function (xhr, status, error) {
                    console.error("Error loading Add Category form:", error);
                }
            });
        }



        // Attach submit handler to the Add Category form
        function attachAddCategoryFormHandler() {
            $("#addCategoryForm").on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    return;
                }
                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("AddNewCategory", "Menu")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // On success: hide the modal, show success toast, and refresh categories
                            var modalEl = document.getElementById('exampleModal12');
                            if (modalEl) {
                                var modal = bootstrap.Modal.getInstance(modalEl);
                                if (modal) {
                                    modal.hide();
                                }
                            }
                            $('.modal-backdrop').remove();
                            toastr.success("Category added successfully!");
                            loadCategories();
                        } else {
                            // On error: show a single toastr error and ensure the modal stays open
                            toastr.error("Failed to add category: " + response.message);
                            var modalEl = document.getElementById('exampleModal12');
                            if (modalEl) {
                                var modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                                modal.show();
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding category:", error);
                        toastr.error("Error adding category. Please try again.");
                        var modalEl = document.getElementById('exampleModal12');
                        if (modalEl) {
                            var modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                            modal.show();
                        }
                    }
                });
            });
        }

        // Attach edit category button handler
        function attachEditCategoryHandler() {
            $(".edit-category-btn").off('click').on("click", function (e) {
                e.preventDefault();
                var categoryId = $(this).data("category-id");
                console.log("Clicked edit for category ID:", categoryId);

                $("#editModalView").html("");

                $.ajax({
                    url: '@Url.Action("EditCategory", "Menu")',
                    type: 'GET',
                    data: { id: categoryId },
                    cache: false,
                    success: function (data) {
                        console.log("Received data for category ID:", categoryId);
                        $("#editModalView").html(data);

                        var modalElement = document.getElementById('editModal');
                        if (modalElement) {
                            var editModal = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
                            editModal.show();
                            attachEditFormHandler(); // Attach form handler after modal is loaded
                        } else {
                            console.error("Modal element #editModal not found in DOM");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading edit partial view for ID " + categoryId + ":", error);
                    }
                });
            });
        }

        // Attach edit form submission handler
        function attachEditFormHandler() {
            $("#editCategoryForm").off('submit').on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) { // Check client-side validation
                    return;
                }
                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("UpdateCategory", "Menu")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // On success: close the modal, show success toast, and reload categories
                            var modalElement = document.getElementById('editModal');
                            var editModal = bootstrap.Modal.getInstance(modalElement);
                            if (editModal) {
                                editModal.hide();
                            }
                            toastr.success(response.message);
                            loadCategories();
                        } else {
                            // On error: show a single toastr error message.
                            toastr.error(response.message);

                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating category:", error);
                        toastr.error("Error updating category. Please try again.");
                    }
                });
            });
        }

        // Ensure modal backdrop is removed when any modal is hidden
        $('.modal').on('hidden.bs.modal', function () {
            $('.modal-backdrop').remove();
        });


        $("#addNewItemBtn, #addNewItemBtnMobile").on("click", function () {
            $.ajax({
                url: '@Url.Action("AddNewItem", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#addItemContainer").html(result);
                    @* $("#exampleModal2").modal('show'); *@
                    var modal = new bootstrap.Modal(document.getElementById("exampleModal2"));
                    modal.show();

                },
                error: function () {
                    toastr.error("Failed to load add item form.");
                }
            });
        });

        // Simplified delete AJAX: attach handler to the delete form submission
        $(document).on('submit', '.delete-category-form', function (e) {
            e.preventDefault();
            var form = $(this);
            var categoryId = form.data('category-id');

            $.ajax({
                url: '@Url.Action("Delete", "Menu")',
                type: 'POST',
                data: form.serialize(),
                success: function (response) {
                    if (response.success) {
                        // Retrieve the delete modal element
                        var modalEl = document.getElementById('deletemodal-' + categoryId);
                        if (modalEl) {
                            var modal = bootstrap.Modal.getInstance(modalEl);
                            if (modal) {
                                modal.hide();
                            }
                        }
                        // Explicitly remove any lingering modal backdrop
                        $('.modal-backdrop').remove();

                        toastr.success("Category deleted successfully!");
                        // Refresh the category list
                        loadCategories();
                        // Optionally, load items for the first category after a short delay
                        setTimeout(function () {
                            var firstCategory = $(".category-link").first();
                            if (firstCategory.length) {
                                loadItems(firstCategory.data("category-id"));
                            }
                        }, 300);
                    } else {
                        toastr.error("Error: " + response.message);
                    }
                },
                error: function () {
                    toastr.error("Failed to delete category. Please try again.");
                }
            });
        });


        $("#selectAll").click(function () {
            $(".itemCheckbox").prop("checked", this.checked);
        });

        $("#deleteSelected").click(function () {
            var selectedIds = $(".itemCheckbox:checked").map(function () {
                return $(this).val();
            }).get();

            if (selectedIds.length === 0) {
                alert("Please select at least one item to delete.");
                return;
            }

            if (!confirm("Are you sure you want to delete the selected items?")) {
                return;
            }

            $.ajax({
                url: "/Menu/DeleteItems",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(selectedIds),
                success: function (response) {
                    if (response.success) {
                        selectedIds.forEach(id => {
                            $("tr[data-id='" + id + "']").remove();
                        });
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function () {
                    alert("An error occurred while deleting items.");
                }
            });
        });

        // Load modifier groups
        function loadModifierGroups() {
            $.ajax({
                url: '@Url.Action("GetModifierGroups", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#ModifierGroupList").html(result);

                    // Reattach click handlers for ModifierGroup links
                    $(".ModifierGroup-link").off("click").on("click", function (e) {
                        e.preventDefault();
                        currentModifierGroupId = $(this).data("modifiergroup-id");
                        loadModifier(currentModifierGroupId, 1, pageSize, "");
                    });

                    // Reattach delete form handler
                    attachDeleteModifierGroupFormHandler();

                    // After loading modifier groups, refresh the modifier list
                    refreshModifierList();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading modifier groups:", error);
                    $("#ModifierGroupList").html("Failed to load modifier groups");
                    toastr.error("Error loading modifier groups.");
                }
            });
        }

        // Load modifiers with pagination and search
        function loadModifier(modifierGroupId, page = 1, size = pageSize, searchString = "") {
            $.ajax({
                url: '@Url.Action("GetModifiers", "Menu")',
                type: 'GET',
                data: {
                    modifierGroupId: modifierGroupId,
                    page: page,
                    pageSize: size,
                    searchString: searchString
                },
                success: function (result) {
                    $(".GetModifierList").html(result);
                    currentPage = page;
                    currentModifierGroupId = modifierGroupId;
                    updateModifierPaginationControls();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading modifiers:", error);
                    $(".GetModifierList").html("Failed to load modifiers");
                }
            });
        }

        // Update modifier pagination controls
        function updateModifierPaginationControls() {
            const totalPages = parseInt($(".GetModifierList").find("input[name='TotalPages']").val()) || 1;
            const currentPage = parseInt($(".GetModifierList").find("input[name='CurrentPage']").val()) || 1;
            let paginationHtml = '';

            if (totalPages > 1) {
                paginationHtml += '<li class="page-item ' + (currentPage === 1 ? 'disabled' : '') + '">';
                paginationHtml += '<a class="page-link text-secondary" href="#" data-page="' + (currentPage - 1) + '"> < </a>';
                paginationHtml += '</li>';

                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += '<li class="page-item ' + (i === currentPage ? 'active' : '') + '">';
                    paginationHtml += '<a class="page-link text-secondary" href="#" data-page="' + i + '">' + i + '</a>';
                    paginationHtml += '</li>';
                }

                paginationHtml += '<li class="page-item ' + (currentPage === totalPages ? 'disabled' : '') + '">';
                paginationHtml += '<a class="page-link text-secondary" href="#" data-page="' + (currentPage + 1) + '"> > </a>';
                paginationHtml += '</li>';
            }

            $(".GetModifierList .pagination").html(paginationHtml);
        }

        // Event delegation for pagination links
        $(document).on("click", ".GetModifierList .page-link", function (e) {
            e.preventDefault();
            const page = $(this).data("page");
            const searchString = $("#searchModifierInput").val().trim();
            const totalPages = parseInt($(".GetModifierList").find("input[name='TotalPages']").val()) || 1;
            if (page && page > 0 && page <= totalPages) {
                loadModifier(currentModifierGroupId, page, pageSize, searchString);
            }
        });

        // Search modifier input handler
        $("#searchModifierInput").on("keyup", function () {
            const searchString = $(this).val().trim();
            loadModifier(currentModifierGroupId, 1, pageSize, searchString);
        });

        // Page size change handler for modifiers
        $(document).on("change", "#modifierPageSizeSelect", function () {
            pageSize = parseInt($(this).val());
            const searchString = $("#searchModifierInput").val().trim();
            loadModifier(currentModifierGroupId, 1, pageSize, searchString);
        });


        // Add Modifier
        $("#addNewModifierBtn , #addNewModifierMobileBtn").on("click", function () {
            $.ajax({
                url: '@Url.Action("AddNewModifier", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#addModifierContainer").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("addModifierModal"));
                    modal.show();
                    attachAddModifierFormHandler();
                },
                error: function () {
                    toastr.error("Failed to load add modifier form.");
                }
            });
        });

        function attachAddModifierFormHandler() {
            $("#addModifierForm").off("submit").on("submit", function (e) {
                e.preventDefault();

                // Check if at least one ModifierGroupId is selected
                var checkedGroups = $("input[name='ModifierGroupIds']:checked").length;
                if (checkedGroups === 0) {
                    toastr.error("Please select at least one Modifier Group.");
                    return;
                }

                // Validate form using jQuery Validation
                if (!$(this).valid()) {
                    console.log("Client-side validation failed:", $("#addModifierForm").validate().errorList);
                    @* toastr.error("Please fill all required fields correctly."); *@
                    return;
                }

                var formData = $(this).serialize();
                console.log("Add Modifier Form Data:", formData);

                $.ajax({
                    url: '@Url.Action("AddNewModifier", "Menu")',
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        console.log("Add Modifier Response:", response);
                        if (response.success) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById("addModifierModal"));
                            modal.hide();
                            toastr.success(response.message);
                            loadModifier(currentModifierGroupId);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Add Modifier AJAX Error:", {
                            status: status,
                            error: error,
                            responseText: xhr.responseText,
                            statusCode: xhr.status
                        });
                        toastr.error("Error adding modifier: " + (xhr.responseText || "Unknown error"));
                    }
                });
            });
        }

        // Edit Modifier
        $(document).on("click", ".edit-modifier-btn", function () {
            var modifierId = $(this).data("modifier-id");
            $.ajax({
                url: '@Url.Action("EditModifier", "Menu")',
                type: 'GET',
                data: { id: modifierId },
                success: function (result) {
                    $("#editModifierContainer").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("editModifierModal"));
                    modal.show();
                    attachEditModifierFormHandler();
                },
                error: function () {
                    toastr.error("Failed to load edit modifier form.");
                }
            });
        });

        function attachEditModifierFormHandler() {
            $("#editModifierForm").off("submit").on("submit", function (e) {
                e.preventDefault();

                // Check if at least one ModifierGroupId is selected
                var checkedGroups = $("input[name='ModifierGroupIds']:checked").length;
                if (checkedGroups === 0) {
                    toastr.error("Please select at least one Modifier Group.");
                    return;
                }

                // Validate form using jQuery Validation
                if (!$(this).valid()) {
                    console.log("Client-side validation failed:", $("#editModifierForm").validate().errorList);
                    @* toastr.error("Please fill all required fields correctly."); *@
                    return;
                }

                var formData = $(this).serialize();
                console.log("Edit Modifier Form Data:", formData);

                $.ajax({
                    url: '@Url.Action("UpdateModifier", "Menu")',
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        console.log("Edit Modifier Response:", response);
                        if (response.success) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById("editModifierModal"));
                            modal.hide();
                            toastr.success(response.message);
                            loadModifier(currentModifierGroupId);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Edit Modifier AJAX Error:", {
                            status: status,
                            error: error,
                            responseText: xhr.responseText,
                            statusCode: xhr.status
                        });
                        toastr.error("Error updating modifier: " + (xhr.responseText || "Unknown error"));
                    }
                });
            });
        }

        // Select All Modifiers Checkbox
        $(document).on("click", "#selectAllModifiers", function () {
            $(".modifierCheckbox").prop("checked", this.checked);
            console.log("Select All clicked, checked:", this.checked); // Debug
        });

        // Single Modifier Checkbox Toggle
        $(document).on("change", ".modifierCheckbox", function () {
            console.log("Checkbox changed, ID:", $(this).val(), "Checked:", $(this).is(":checked")); // Debug
            if ($(".modifierCheckbox:checked").length === $(".modifierCheckbox").length) {
                $("#selectAllModifiers").prop("checked", true);
            } else {
                $("#selectAllModifiers").prop("checked", false);
            }
        });

        // Single Modifier Delete from Group
        $(document).on("click", ".confirm-delete-modifier", function () {
            var modifierId = $(this).data("modifier-id");
            var modifierGroupId = $(this).data("modifier-group-id");
            $.ajax({
                url: '@Url.Action("DeleteModifier", "Menu")',
                type: 'POST',
                data: { id: modifierId, modifierGroupId: modifierGroupId },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        var modal = bootstrap.Modal.getInstance(document.getElementById("deleteModifierModal_" + modifierId));
                        modal.hide();
                        $('.modal-backdrop').remove();
                        $('body').removeClass('modal-open'); // Ensure body class is cleared
                        toastr.success(response.message);
                        loadModifier(currentModifierGroupId);
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error deleting modifier:", error);
                    toastr.error("Failed to remove modifier from group.");
                }
            });
        });

        // Mass Modifier Delete from Group
        $("#deleteSelectedModifiers").on("click", function () {
            var selectedIds = $(".modifierCheckbox:checked").map(function () {
                return parseInt($(this).val());
            }).get();

            console.log("Selected Modifier IDs:", selectedIds); // Debug: Check selected IDs
            console.log("Current Modifier Group ID:", currentModifierGroupId); // Debug: Verify group ID

            if (selectedIds.length === 0) {
                toastr.warning("Please select at least one modifier to remove.");
                return;
            }

            if (!confirm("Are you sure you want to remove the selected modifiers from this group?")) {
                return;
            }

            $.ajax({
                url: '@Url.Action("DeleteModifiers", "Menu")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ ids: selectedIds, modifierGroupId: currentModifierGroupId }),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    console.log("DeleteModifiers Response:", response); // Debug: Log server response
                    if (response.success) {
                        toastr.success(response.message);
                        loadModifier(currentModifierGroupId);
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error deleting modifiers:", error, "Response:", xhr.responseText); // Debug: Log error details
                    toastr.error("Failed to remove modifiers from group.");
                }
            });
        });



        // Load Add Modifier Group Form
        function loadAddModifierGroup() {
            $.ajax({
                url: '@Url.Action("AddNewModifierGroup", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#addModifierGroupContainer").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("addModGroupModal"));
                    modal.show();
                    attachAddModifierGroupFormHandler();
                },
                error: function () {
                    toastr.error("Failed to load add modifier group form.");
                }
            });
        }

        // Attach Add Modifier Group Form Handler
        function attachAddModifierGroupFormHandler() {
            $("#addModifierGroupForm").off("submit").on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    @* toastr.error("Please fill all required fields correctly."); *@
                    return;
                }

                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("AddNewModifierGroup", "Menu")',
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById("addModGroupModal"));
                            modal.hide();
                            toastr.success(response.message);
                            loadModifierGroups();
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error("Error adding modifier group.");
                    }
                });
            });
        }

        // Load Edit Modifier Group Form
        $(document).on("click", ".edit-modifier-group-btn", function () {
            var modifierGroupId = $(this).data("modifiergroup-id");
            $.ajax({
                url: '@Url.Action("EditModifierGroup", "Menu")',
                type: 'GET',
                data: { id: modifierGroupId },
                success: function (result) {
                    $("#editModifierGroupContainer").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("editModGroupModal"));
                    modal.show();
                    attachEditModifierGroupFormHandler();
                },
                error: function () {
                    toastr.error("Failed to load edit modifier group form.");
                }
            });
        });

        // Attach Edit Modifier Group Form Handler
        function attachEditModifierGroupFormHandler() {
            $("#editModifierGroupForm").off("submit").on("submit", function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    @* toastr.error("Please fill all required fields correctly."); *@
                    return;
                }

                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("UpdateModifierGroup", "Menu")',
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById("editModGroupModal"));
                            modal.hide();
                            toastr.success(response.message);
                            loadModifierGroups();
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error("Error updating modifier group.");
                    }
                });
            });
        }

        // Load Select Existing Modifiers Modal
        $(document).on("click", "#addExistingModifiersLink", function (e) {
            e.preventDefault();
            $.ajax({
                url: '@Url.Action("SelectExistingModifiers", "Menu")',
                type: 'GET',
                success: function (result) {
                    $("#selectModifiersContainer").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("selectModifiersModal"));
                    modal.show();
                    attachSelectModifiersHandler();
                },
                error: function () {
                    toastr.error("Failed to load modifiers list.");
                }
            });
        });

        // Update Hidden Inputs with Selected Modifier IDs
        function updateSelectedModifierIds() {
            var selectedIds = [];
            $("#selectedModifiersContainer .badge").each(function () {
                selectedIds.push($(this).data("modifier-id"));
            });

            // Remove existing hidden inputs for SelectedModifierIds
            $("input[name^='SelectedModifierIds']").remove();

            // Add a hidden input for each selected ID
            selectedIds.forEach(function (id, index) {
                $("#editModifierGroupForm").append(
                    `<input type="hidden" name="SelectedModifierIds[${index}]" value="${id}" />`
                );
                $("#addModifierGroupForm").append(
                    `<input type="hidden" name="SelectedModifierIds[${index}]" value="${id}" />`
                );
            });
        }

        // Handle Select Existing Modifiers
        function attachSelectModifiersHandler() {
            // Select All Checkbox
            $("#selectAllExistingModifiers").on("change", function () {
                $(".modifier-checkbox").prop("checked", $(this).prop("checked"));
            });

            // Search Functionality
            $("#modifierSearchInput").on("keyup", function () {
                var searchTerm = $(this).val().toLowerCase();
                $("#modifierList tr").each(function () {
                    var modifierName = $(this).data("modifier-name").toLowerCase();
                    $(this).toggle(modifierName.includes(searchTerm));
                });
            });

            // Add Selected Modifiers
            $("#addSelectedModifiers").on("click", function () {
                var selectedModifiers = [];
                $(".modifier-checkbox:checked").each(function () {
                    var modifierId = $(this).val();
                    var modifierName = $(this).closest("tr").data("modifier-name");
                    selectedModifiers.push({ id: modifierId, name: modifierName });
                });

                if (selectedModifiers.length === 0) {
                    toastr.warning("Please select at least one modifier.");
                    return;
                }

                // Update the selected modifiers container
                var selectedContainer = $("#selectedModifiersContainer");
                selectedContainer.empty(); // Clear existing badges
                var selectedIds = [];
                selectedModifiers.forEach(function (modifier) {
                    selectedContainer.append(
                        `<span class="badge bg-secondary-subtle text-black me-1 mb-2" data-modifier-id="${modifier.id}">
                    ${modifier.name}
                    <button type="button" class="btn-close btn-close-black ms-1 remove-modifier" aria-label="Remove"></button>
                </span>`
                    );
                    selectedIds.push(modifier.id);
                });

                // Update the hidden inputs with selected modifier IDs
                updateSelectedModifierIds();

                // Close the Select Existing Modifiers modal
                var modal = bootstrap.Modal.getInstance(document.getElementById("selectModifiersModal"));
                modal.hide();

                // Ensure the parent modal (Add/Edit Modifier Group) remains open
                var parentModal = bootstrap.Modal.getInstance(document.getElementById("addModGroupModal")) ||
                    bootstrap.Modal.getInstance(document.getElementById("editModGroupModal"));
                if (parentModal) {
                    parentModal.show();
                }
            });



        }
        // Remove Modifier from Selection
        $(document).on("click", ".remove-modifier", function () {
            var badge = $(this).closest(".badge");
            badge.remove();
            updateSelectedModifierIds(); // Update the hidden inputs after removal
        });

        // Add Modifier Group Button Click Handler
        $("#addModifierGroupBtn").on("click", function () {
            loadAddModifierGroup();
        });


        // Function to refresh the modifier list after a delete operation
        function refreshModifierList() {
            // Check if there are any modifier groups remaining
            var firstModifierGroup = $(".ModifierGroup-link").first();
            if (firstModifierGroup.length) {
                // Load modifiers for the first remaining modifier group
                currentModifierGroupId = firstModifierGroup.data("modifiergroup-id");
                loadModifier(currentModifierGroupId, 1, pageSize, "");
            } else {
                // If no modifier groups remain, clear the modifier list
                $(".GetModifierList").html("<p>No modifiers available.</p>");
                currentModifierGroupId = null; // Reset the currentModifierGroupId
            }
        }

        // Attach Delete Modifier Group Form Handler
        function attachDeleteModifierGroupFormHandler() {
            $(".delete-modifier-group-form").off("submit").on("submit", function (e) {
                e.preventDefault();
                var form = $(this);
                var modifierGroupId = form.data("modifiergroup-id");

                $.ajax({
                    url: '@Url.Action("DeleteModifierGroup", "Menu")',
                    type: 'POST',
                    data: form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById("deletemodal-" + modifierGroupId));
                            if (modal) {
                                modal.hide();
                                $('.modal-backdrop').remove();
                                $('body').removeClass('modal-open'); // Ensure body class is cleared
                            }
                            toastr.success(response.message);
                            loadModifierGroups(); // Refresh the modifier group list
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error("Error deleting modifier group.");
                    }
                });
            });
        }



        // Initial load of categories, items, and the Add Category form
        loadCategories();
        loadItems(1);
        loadAddCategory();
        loadModifierGroups();
        loadModifier(3);
    });
</script>

<script>
    document.getElementById("categoryToggle").addEventListener("click", function () {
        var categorySection = document.getElementById("category-section");
        var contentSection = document.getElementById("content-section");
        var toggleContainer = document.getElementById("toggle-container");

        if (window.innerWidth <= 991) {
            categorySection.classList.toggle("category-visible");
            toggleContainer.classList.toggle("toggle-move");
        } else {
            if (categorySection.style.display === "none" || categorySection.classList.contains("d-none")) {
                categorySection.style.display = "block";
                categorySection.classList.remove("d-none");
                if (categorySection.classList.contains("col-xl-3")) {
                    contentSection.classList.remove("col-12");
                    contentSection.classList.add("col-xl-9", "col-lg-8");
                } else if (categorySection.classList.contains("col-xl-4")) {
                    contentSection.classList.remove("col-12");
                    contentSection.classList.add("col-xl-8", "col-lg-8");
                }
            } else {
                categorySection.style.display = "none";
                categorySection.classList.add("d-none");
                contentSection.classList.remove("col-xl-9", "col-lg-8", "col-xl-8");
                contentSection.classList.add("col-12");
            }
        }
    });


    document.getElementById("modifierToggle").addEventListener("click", function () {
        var modifierSection = document.getElementById("modifier-section");
        var modifierContentSection = document.getElementById("modifier-content-section");
        var modifierToggleContainer = document.getElementById("modifier-toggle-container");

        if (window.innerWidth <= 991) {
            modifierSection.classList.toggle("category-visible");
            modifierToggleContainer.classList.toggle("toggle-move");
        } else {
            if (modifierSection.style.display === "none" || modifierSection.classList.contains("d-none")) {
                modifierSection.style.display = "block";
                modifierSection.classList.remove("d-none");
                if (modifierSection.classList.contains("col-xl-3")) {
                    modifierContentSection.classList.remove("col-12");
                    modifierContentSection.classList.add("col-xl-9", "col-lg-8");
                } else if (modifierSection.classList.contains("col-xl-4")) {
                    modifierContentSection.classList.remove("col-12");
                    modifierContentSection.classList.add("col-xl-8", "col-lg-8");
                }
            } else {
                modifierSection.style.display = "none";
                modifierSection.classList.add("d-none");
                modifierContentSection.classList.remove("col-xl-9", "col-lg-8", "col-xl-8");
                modifierContentSection.classList.add("col-12");
            }
        }
    });

    const chBoxes =
        document.querySelectorAll('.dropdown-menu input[type="checkbox"]');
    const dpBtn =
        document.getElementById('multiSelectDropdown');
    let mySelectedListItems = [];

    function handleCB() {
        mySelectedListItems = [];
        let mySelectedListItemsText = '';

        chBoxes.forEach((checkbox) => {
            if (checkbox.checked) {
                mySelectedListItems.push(checkbox.value);
                mySelectedListItemsText += checkbox.value + ', ';
            }
        });

        dpBtn.innerText =
            mySelectedListItems.length > 0
                ? mySelectedListItemsText.slice(0, -2) : 'Select';
    }

    chBoxes.forEach((checkbox) => {
        checkbox.addEventListener('change', handleCB);
    }); 
</script>

<style>
    .category-option.active {
        background-color: rgb(119, 163, 209);
        color: white;
        border-radius: 5px;
    }

    .category-option {
        padding: 10px;
        cursor: pointer;
    }
</style>