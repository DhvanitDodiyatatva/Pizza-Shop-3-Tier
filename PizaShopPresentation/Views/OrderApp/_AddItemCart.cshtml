@model PizzaShopRepository.Models.Order
@using Newtonsoft.Json

<div class="card mt-5 mx-5 border-0 shadow-sm" style="border-radius: 15px;">
    <div class="card-body p-3">
        <!-- Table Info -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="text-muted">
                <img src="~/images/dashboard/tableandSection.png" class="ps-1 pe-2"
                    style="height: 40px; width:40px; background-color: #6eb7eb;">
                <span class="fw-bold" style="margin-left: 15px;">
                    @Model.OrderTables.FirstOrDefault()?.Table.Section.Name
                    <p style="margin-left: 54px; margin-top: -10px;" class="me-2">
                        Table: @string.Join(", ", Model.OrderTables.Select(ot => ot.Table.Name))
                    </p>
                </span>
            </div>
            <div class="d-flex align-items-center">
                <button class="btn btn-outline text-primary-emphasis me-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                        class="bi bi-qr-code-scan" viewBox="0 0 16 16">
                        <path
                            d="M0 .5A.5.5 0 0 1 .5 0h3a.5.5 0 0 1 0 1H1v2.5a.5.5 0 0 1-1 0zm12 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0V1h-2.5a.5.5 0 0 1-.5-.5M.5 12a.5.5 0 0 1 .5.5V15h2.5a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5m15 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H15v-2.5a.5.5 0 0 1 .5-.5M4 4h1v1H4z" />
                        <path d="M7 2H2v5h5zM3 3h3v3H3zm2 8H4v1h1z" />
                        <path d="M7 9H2v5h5zm-4 1h3v3H3zm8-6h1v1h-1z" />
                        <path
                            d="M9 2h5v5H9zm1 1v3h3V3zM8 8v2h1v1H8v1h2v-2h1v2h1v-1h2v-1h-3V8zm2 2H9V9h1zm4 2h-1v1h-2v1h3zm-4 2v-1H8v1z" />
                        <path d="M12 9h2V8h-2z" />
                    </svg>
                </button>
                <button class="btn btn-outline text-primary-emphasis me-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                        class="bi bi-person-lines-fill" viewBox="0 0 16 16">
                        <path
                            d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-5 6s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zM11 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5m.5 2.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1zm2 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1z" />
                    </svg>
                </button>
                <button class="btn btn-outline text-primary-emphasis">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                        class="bi bi-chat-left-text" viewBox="0 0 16 16">
                        <path
                            d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                        <path
                            d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5M3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6m0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Headers for Item, Quantity, Amount -->
        <div class="d-flex align-items-center mb-1 row">
            <div class="col-7 fw-bold text-start" style="text-align: center;">Item</div>
            <div class="col-3 fw-bold text-end" style="width: 100px; text-align: center;">Quantity</div>
            <div class="col-2 fw-bold text-end" style="width: 100px; text-align: center;">Amount</div>
        </div>

        <!-- Accordion for Items -->
        <div class="accordion mb-2 custom-scrollbar" id="cartAccordion"
            style="max-height: 260px; min-height: 250px; overflow-y: auto; overflow-x: hidden;">
            @foreach (var orderItem in Model.OrderItems)
            {
                var globalId = orderItem.Item.Name.ToLower().Replace(" ", "");
                <div class="accordion mt-1" id="itemAccordian-@orderItem.Id-@globalId">
                    <div class="accordion-item d-flex justify-content-between text-secondary mb-2 mt-1">
                        <div class="d-flex flex-column">
                            <div class="accordion-header text-secondary d-flex fw-bolder align-items-center">
                                <div class="d-flex align-items-center">
                                    <button class="accordion-button pe-1 ps-2 text-secondary fw-bolder rounded-2 collapsed"
                                        type="button" data-bs-toggle="collapse"
                                        data-bs-target="#collapse-@orderItem.Id-@globalId"
                                        aria-controls="collapse-@orderItem.Id-@globalId">
                                    </button>
                                    <div class="item-name-order-card" data-globalId="@globalId"
                                        data-orderedItemId="@orderItem.Id">
                                        <div class="text-truncate" style="max-width:150px;"> @orderItem.Item.Name</div>
                                    </div>
                                </div>
                            </div>
                            <div id="collapse-@orderItem.Id-@globalId" class="accordion-collapse collapse"
                                data-bs-parent="#itemAccordian-@orderItem.Id-@globalId">
                                <div class="accordion-body">
                                    @foreach (var modifier in orderItem.OrderItemModifiers)
                                    {
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <span> @modifier.Modifier.Name</span>
                                            <span>₹@modifier.Price.ToString("F2")</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-4 me-3 align-items-center">
                            <div class="d-flex align-items-center gap-2 border border-secondary rounded px-2 py-1 quantity-selector text-secondary justify-content-between"
                                style="width:100px">
                                <button class="btn btn-sm border-0 bg-transparent minus px-2 py-1"
                                    data-itemId="@orderItem.Id" data-globalId="@globalId">-</button>
                                <div class="count">@orderItem.Quantity</div>
                                <button class="btn btn-sm border-0 bg-transparent plus px-2 py-1" data-itemId="@orderItem.Id" data-globalId="@globalId">
+</button>
                            </div>
                            <div style="width:100px;">
                                <span class="fs-5">₹@orderItem.TotalPrice.ToString("F2")</span><br>
                                <span>₹@(orderItem.OrderItemModifiers.Sum(m => m.Price).ToString("F2"))</span>
                            </div>
                            <a class="btn border-0 p-0" id="deleteItem" data-globalId="@globalId">
                                 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                                    class="bi bi-trash3" viewBox="0 0 16 16">
                                    <path
                                        d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 0 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Subtotal and Taxes -->
        @{
            // Calculate SUBTOTAL: Sum of item base prices and modifier prices
            decimal subtotal = Model.OrderItems.Sum(oi => oi.TotalPrice + oi.OrderItemModifiers.Sum(m => m.Price));
            // Initialize total taxes
            decimal totalTaxes = 0m;
            // Track flat tax checkbox states (default checked for demo)
            var flatTaxStates = Model.OrderTaxes.Where(t => t.TaxFlat.HasValue)
                .ToDictionary(t => t.Tax.Name, t => true); // Default checked
            // Calculate taxes
            foreach (var tax in Model.OrderTaxes)
            {
                if (tax.TaxFlat.HasValue && flatTaxStates[tax.Tax.Name])
                {
                    totalTaxes += tax.TaxFlat.Value;
                }
                else if (tax.TaxPercentage.HasValue)
                {
                    totalTaxes += subtotal * (tax.TaxPercentage.Value / 100m);
                }
            }
            const decimal sgstPercentage = 0.0m;
            bool isSgstChecked = true; // Default checked for demo; adjust based on actual logic
            decimal sgstAmount = isSgstChecked ? subtotal * (sgstPercentage / 100m) : 0m;
            totalTaxes += sgstAmount;
            // Calculate TOTAL
            decimal total = subtotal + totalTaxes;
        }
        <div class="mb-3" id="cartSummary">
            <div class="d-flex justify-content-between">
                <span>SUBTOTAL</span>
                <span>₹@subtotal.ToString("F2")</span>
            </div>
            @foreach (var tax in Model.OrderTaxes)
            {
                <div class="d-flex justify-content-between tax-row" data-tax-name="@tax.Tax.Name"
                    style="@(tax.TaxFlat.HasValue && !flatTaxStates[tax.Tax.Name] ? "display: none;" : "")">
                    <span>
                        @if (tax.TaxFlat.HasValue)
                        {
                            <input type="checkbox" class="checkbox flat-tax-checkbox form-check-input" data-tax-name="@tax.Tax.Name"
                                @(flatTaxStates[tax.Tax.Name] ? "checked" : "")>
                        }
                        @tax.Tax.Name
                        @if (tax.TaxFlat.HasValue)
                        {
                            <span>(₹@tax.TaxFlat.Value.ToString("F2"))</span>
                        }
                        else
                        {
                            <span>(@tax.TaxPercentage.Value%)</span>
                        }
                    </span>
                    <span style="display: @(tax.TaxFlat.HasValue ? (flatTaxStates[tax.Tax.Name] ? "block" : "none") : "block");">
                        @if (tax.TaxFlat.HasValue)
                        {
                            <span>₹@tax.TaxFlat.Value.ToString("F2")</span>
                        }
                        else
                        {
                            decimal percentageAmount = subtotal * (tax.TaxPercentage.Value / 100m);
                            <span>₹@percentageAmount.ToString("F2")</span>
                        }
                    </span>
                </div>
            }
            <div class="d-flex justify-content-between fw-bold">
                <span>TOTAL</span>
                <span>₹@total.ToString("F2")</span>
            </div>
        </div>

        <!-- Payment Method -->
        <div class="mb-3 d-flex justify-content-between">
            <div><label class="form-label">Payment Method</label></div>
            <div class="d-flex">
                <div class="form-check me-3">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="cash" checked>
                    <label class="form-check-label" for="cash">Cash</label>
                </div>
                <div class="form-check me-3">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="card">
                    <label class="form-check-label" for="card">Card</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="upi">
                    <label class="form-check-label" for="upi">UPI</label>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="d-flex justify-content-between">
            <button class="btn btn-main text-white" id="saveOrderButton">Save</button>
            <button class="btn btn-outline text-primary-emphasis">Complete</button>
            <button class="btn btn-outline text-primary-emphasis">Generate Invoice</button>
            <button class="btn btn-outline text-primary-emphasis">Cancel</button>
        </div>
    </div>
</div>

<script>
    // Serialize tax data for client-side use
    window.orderTaxes = @Html.Raw(JsonConvert.SerializeObject(Model.OrderTaxes.Select(ot => new
    {
        Name = ot.Tax.Name,
        TaxFlat = ot.TaxFlat,
        TaxPercentage = ot.TaxPercentage
    })));
    window.sgstSettings = {
        percentage: @sgstPercentage,
        isChecked: @Json.Serialize(isSgstChecked)
    };
    // Initialize flat tax checkbox states (default checked)
    window.taxSettings = @Html.Raw(JsonConvert.SerializeObject(flatTaxStates));

    $(document).ready(function () {
        // Handle flat tax checkbox toggle
        $('.flat-tax-checkbox').on('change', function () {
            const taxName = $(this).data('tax-name');
            const isChecked = $(this).is(':checked');
            window.taxSettings[taxName] = isChecked;
            const $taxRow = $(this).closest('.tax-row');

            // Show/hide tax row
            $taxRow.css('display', isChecked ? '' : 'none');

            // Show/hide tax amount span
            $taxRow.find('span:last').css('display', isChecked ? 'block' : 'none');

            // Recalculate total
            const subtotal = parseFloat($('.d-flex.justify-content-between:contains("SUBTOTAL") span:last').text().replace('₹', '')) || 0;
            let totalTaxes = 0;

            // Apply taxes based on checkbox state
            window.orderTaxes.forEach(tax => {
                if (tax.TaxFlat !== null && window.taxSettings[tax.Name]) {
                    totalTaxes += parseFloat(tax.TaxFlat) || 0;
                } else if (tax.TaxPercentage !== null) {
                    totalTaxes += subtotal * (tax.TaxPercentage / 100);
                }
            });

            // Apply SGST
            const sgstAmount = window.sgstSettings.isChecked ? subtotal * (window.sgstSettings.percentage / 100) : 0;
            totalTaxes += sgstAmount;

            // Update TOTAL display
            const total = subtotal + totalTaxes;
            $('.d-flex.justify-content-between.fw-bold span:last').text(`₹${total.toFixed(2)}`);
        });

        // Handle SGST checkbox toggle (if re-enabled)
        $('.sgst-checkbox').on('change', function () {
            const isChecked = $(this).is(':checked');
            const subtotal = parseFloat($('.d-flex.justify-content-between:contains("SUBTOTAL") span:last').text().replace('₹', '')) || 0;
            window.sgstSettings.isChecked = isChecked;
            const sgstAmount = isChecked ? subtotal * (@sgstPercentage / 100) : 0;

            // Update SGST amount display
            $(this).closest('.d-flex').find('span:last').text(`₹${sgstAmount.toFixed(2)}`);

            // Recalculate total
            let totalTaxes = 0;
            window.orderTaxes.forEach(tax => {
                if (tax.TaxFlat !== null && window.taxSettings[tax.Name]) {
                    totalTaxes += parseFloat(tax.TaxFlat) || 0;
                } else if (tax.TaxPercentage !== null) {
                    totalTaxes += subtotal * (tax.TaxPercentage / 100);
                }
            });
            totalTaxes += sgstAmount;
            const total = subtotal + totalTaxes;

            // Update TOTAL display
            $('.d-flex.justify-content-between.fw-bold span:last').text(`₹${total.toFixed(2)}`);
        });

        // Handle Save button click
        $('#saveOrderButton').on('click', function () {
            // Get order ID from URL
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');

            if (!orderId) {
                toastr.error('Order ID is missing.');
                return;
            }

            // Get payment method
            const paymentMethod = $('input[name="paymentMethod"]:checked').attr('id');

            // Prepare cart items
            const cartItems = window.cartItems.map(item => ({
                ItemId: item.Id,
                Quantity: item.Quantity,
                UnitPrice: item.ItemPrice,
                TotalPrice: item.ItemPrice * item.Quantity,
                Modifiers: item.Modifiers.map(mod => ({
                    ModifierId: mod.Id,
                    Quantity: item.Quantity, // Modifier quantity same as item quantity
                    Price: mod.Price
                }))
            }));

            // Prepare tax settings
            const taxSettings = {};
            window.orderTaxes.forEach(tax => {
                taxSettings[tax.Name] = window.taxSettings[tax.Name] || false;
            });

            // Prepare data to send
            const orderData = {
                OrderId: orderId,
                TotalAmount: parseFloat($('.d-flex.justify-content-between.fw-bold span:last').text().replace('₹', '')),
                PaymentMethod: paymentMethod,
                CartItems: cartItems,
                TaxSettings: taxSettings
            };

            // Send AJAX request to save order
            $.ajax({
                url: '@Url.Action("SaveOrder", "OrderApp")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderData),
                success: function (result) {
                    if (result.success) {
                        toastr.success(result.message);
                        // Reload cart to reflect updated database state
                        loadCart(orderId);
                    } else {
                        toastr.error(result.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error saving order:', error);
                    toastr.error('Failed to save order. Please try again.');
                }
            });
        });
    });
</script>