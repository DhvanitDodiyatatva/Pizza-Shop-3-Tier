@model PizzaShopRepository.Models.Item

<div class="modal-header">
    <h5 class="modal-title" id="itemModifiersModalLabel">@Model.Name - Modifiers</h5>
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
</div>
<div class="modal-body">
    <form id="modifierForm">
        <input type="hidden" id="itemId" value="@Model.Id" />
        <input type="hidden" id="itemName" value="@Model.Name" />
        <input type="hidden" id="itemPrice" value="@Model.Price" />
        @if (Model.ItemModifierGroups.Any(img => !img.IsDeleted))
        {
            <div class="custom-scrollbar"
                style="max-height: 300px; min-height: 250px; overflow-y: auto; overflow-x: hidden;">
                @foreach (var itemModifierGroup in Model.ItemModifierGroups.Where(img => !img.IsDeleted))
                {
                    var modifierGroup = itemModifierGroup.ModifierGroup;
                    if (modifierGroup != null && !modifierGroup.IsDeleted)
                    {
                        <div class="modifier-group mb-3">
                            <div class="fs-5 text-secondary fw-bold">@modifierGroup.Name</div>
                            <small class="text-muted">
                                (You can choose Minimum - @itemModifierGroup.MinLoad & Maximum - @itemModifierGroup.MaxLoad options)
                            </small>
                            <input type="hidden" class="min-load" value="@itemModifierGroup.MinLoad" />
                            <input type="hidden" class="max-load" value="@itemModifierGroup.MaxLoad" />
                            <div class="modifier-options d-flex flex-wrap gap-2 mt-2">
                                @foreach (var mapping in modifierGroup.ModifierGroupMappings.Where(mgm => !mgm.IsDeleted))
                                {
                                    var modifier = mapping.Modifier;
                                    if (modifier != null && !modifier.IsDeleted)
                                    {
                                        <div class="card modifier-card"
                                            style="width: 150px; height:60px ; border: 1px solid #868482; cursor: pointer;"
                                            data-modifier-id="@modifier.Id" data-price="@modifier.Price" data-group-id="@modifierGroup.Id"
                                            data-modifier-name="@modifier.Name">
                                            <div class="card-body p-2 text-center">
                                                <span class="d-block">@modifier.Name</span>
                                                <span class="d-block text-muted">â‚¹@modifier.Price</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <p>No modifiers available for this item.</p>
        }
    </form>
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    <button type="button" class="btn btn-main text-white" id="addItemButton" disabled>Add</button>
</div>

<script>
    $(document).ready(function () {
        // Ensure cart is initialized
        window.cartItems = window.cartItems || [];

        function validateModifiers() {
            let allRequirementsMet = true;

            if ($('.modifier-group').length === 0) {
                $('#addItemButton').prop('disabled', false);
                return;
            }

            $('.modifier-group').each(function () {
                const group = $(this);
                const minLoad = parseInt(group.find('.min-load').val()) || 0;
                const maxLoad = parseInt(group.find('.max-load').val()) || Infinity;
                const selectedCount = group.find('.modifier-card.selected').length;

                const meetsMin = selectedCount >= minLoad;
                const meetsMax = selectedCount <= maxLoad;

                if (!meetsMin || !meetsMax) {
                    allRequirementsMet = false;
                }
            });

            $('#addItemButton').prop('disabled', !allRequirementsMet);
        }

        $('.modifier-card').on('click', function () {
            $(this).toggleClass('selected');
            if ($(this).hasClass('selected')) {
                $(this).css('background-color', '#E6F0FA');
                $(this).css('border', '1px solid #15508a');
            } else {
                $(this).css('background-color', '');
                $(this).css('border', '1px solid #868482');
            }
            validateModifiers();
        });

        $('#addItemButton').on('click', function () {
            const itemId = $('#itemId').val();
            const itemName = $('#itemName').val();
            const itemPrice = parseFloat($('#itemPrice').val());
            const modifiers = [];

            // Collect selected modifiers
            $('.modifier-card.selected').each(function () {
                modifiers.push({
                    Id: $(this).data('modifier-id'),
                    Name: $(this).data('modifier-name'),
                    Price: parseFloat($(this).data('price') || 0)
                });
            });

            // Create cart item
            const cartItem = {
                Id: itemId,
                Name: itemName,
                Quantity: 1,
                ItemPrice: itemPrice,
                TotalPrice: itemPrice,
                Modifiers: modifiers,
                GlobalId: itemName.toLowerCase().replace(/\s+/g, '') + '-' + Date.now()
            };

            // Check if item with same modifiers exists
            const existingItemIndex = window.cartItems.findIndex(ci =>
                ci.Id === itemId &&
                JSON.stringify(ci.Modifiers.map(m => m.Id).sort()) === JSON.stringify(modifiers.map(m => m.Id).sort())
            );

            if (existingItemIndex !== -1) {
                window.cartItems[existingItemIndex].Quantity += 1;
                window.cartItems[existingItemIndex].TotalPrice = window.cartItems[existingItemIndex].ItemPrice * window.cartItems[existingItemIndex].Quantity;
            } else {
                window.cartItems.push(cartItem);
            }

            // Trigger cart update in _AddItemCart.cshtml
            if (typeof updateCartDisplay === 'function') {
                updateCartDisplay();
            }

            // Close modal
            $('#itemModifiersModal').modal('hide');
        });

        validateModifiers();
    });
</script>