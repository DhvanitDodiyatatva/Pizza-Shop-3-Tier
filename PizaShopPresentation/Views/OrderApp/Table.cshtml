@model List<PizzaShopRepository.ViewModels.SectionDetailsViewModel>

@{
    ViewData["Title"] = "Tables";
    Layout = "~/Views/Shared/_LayoutOrdApp.cshtml";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<div class="Users-content mt-0 p-xl-5 p-lg-4 p-md-4 p-sm-4 p-4">
    <div class="d-flex align-items-center justify-content-between my-2 z-0">
        <div>
            <div class="fw-bolder fs-2 page-text me-2">Table View</div>
        </div>
        <div class="d-flex gap-3 flex-wrap">
            <div class="d-flex align-items-center">
                <span class="circle available" ></span>
                <p class="mb-0">Available</p>
            </div>
            <div class="d-flex align-items-center">
                <span class="circle selected"></span>
                <p class="mb-0">Selected</p>
            </div>
            <div class="d-flex align-items-center">
                <span class="circle assigned"></span>
                <p class="mb-0">Assigned</p>
            </div>
            <div class="d-flex align-items-center">
                <span class="circle running"></span>
                <p class="mb-0">Running</p>
            </div>
        </div>
    </div>

    <div class="">
        <div class="accordion" id="accordionExample">
            @for (int i = 0; i < Model.Count; i++)
            {
                var floor = Model[i];
                var floorId = $"section-{floor.FloorId}";
                var floorCollapseId = $"collapse-{floor.FloorId}";
                var isFirst = i == 0;
                var collapseClass = isFirst ? "accordion-collapse collapse show" : "accordion-collapse collapse";
                var ariaExpanded = isFirst ? "true" : "false";

                <div class="accordion-item mb-3 rounded-2 shadow-sm">
                    <h2 class="accordion-header custom-header" id="heading-@floorId">
                        <div class="d-md-flex justify-content-between align-items-center w-100">
                            <button class="accordion-button reset-button-styles @(!isFirst ? "collapsed" : "") flex-grow-1 text-start"
                                    type="button" data-bs-toggle="collapse" data-bs-target="#@floorCollapseId"
                                    aria-expanded="@ariaExpanded" aria-controls="@floorCollapseId">
                                <div class="d-flex align-items-center">
                                    <span class="accordion-custom-arrow"></span>
                                    <span class="headAccordian fs-4 fw-normal" style="color: #1f73ae;">@floor.FloorName</span>
                                </div>
                            </button>

                            <div class="d-flex gap-3 align-items-center accordianLeft pe-3">
                                <div class="d-flex align-items-center">
                                    <span class="circle available ms-2"></span>
                                    <p class="mb-0 collapsNumber fs-5">
                                        @floor.TableDetails.Count(table => table.Availability == "Available")
                                    </p>
                                </div>
                                <div class="d-flex align-items-center">
                                    <span class="circle assigned"></span>
                                    <p class="mb-0 collapsNumber fs-5">
                                        @floor.TableDetails.Count(table => table.Availability == "Assigned")
                                    </p>
                                </div>
                                <div class="d-flex align-items-center">
                                    <span class="circle running"></span>
                                    <p class="mb-0 collapsNumber fs-5">
                                        @floor.TableDetails.Count(table => table.Availability == "Running")
                                    </p>
                                </div>
                                <a class="btn btn-main text-white fw-semibold waiting-token-btn" style="min-width: 120px; color: #1f73ae"
                                   data-section-id="@floor.FloorId" data-section-name="@floor.FloorName"
                                   data-bs-toggle="modal" data-bs-target="#waitingTokenModal">
                                    + Waiting Token
                                </a>
                            </div>
                        </div>
                    </h2>
                    <div id="@floorCollapseId" class="@collapseClass" aria-labelledby="heading-@floorId" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="row">
                               @foreach (var table in floor.TableDetails)
                                {
                                    var cardClass = table.Availability switch
                                    {
                                        "Available" => "custom-card-available",
                                        "Running" => "custom-card-occupied",
                                        "Assigned" => "custom-card-reserved",
                                        _ => "custom-card-default"
                                    };

                                    <div class="col-md-2" style="cursor: pointer; min-height: 200px; min-width: 300px;">
                                        <div class="card @cardClass mb-3 table-card" data-table-id="@table.TableId" data-status="@table.Availability" data-section-id="@floor.FloorId">
                                            <div class="card-body">
                                                <h5 class="card-title">@table.TableName</h5>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div class="algin-items-center">
                                                        <i class="bi bi-people text-dark"></i>
                                                        <p class="card-text text-dark">@table.Capacity</p>
                                                    </div>
                                                    @if (table.Availability == "Assigned" || table.Availability == "Running")
                                                    {
                                                        <div class="text-end align-items-center">
                                                            <i class="bi bi-clock text-dark"></i>
                                                            <p class="card-text text-dark elapsed-time d-flex" data-created-at="@table.CreatedAt?.ToString("o")">
                                                                @table.TimeSinceCreated
                                                            </p>
                                                        </div>
                                                    }
                                                </div>
                                                <p class="card-text text-dark">@table.Availability</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="d-flex justify-content-end">
                                <button class="btn btn-main text-white assign-btn" disabled data-section-id="@floor.FloorId" data-section-name="@floor.FloorName">
                                    Assign
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Placeholder modal container -->
    <div class="modal fade" id="waitingTokenModal" tabindex="-1" aria-labelledby="waitingTokenModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="waitingTokenModalLabel">Waiting Token Details</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Partial view form content will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Offcanvas for Customer Details -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="customerDetailsOffcanvas" aria-labelledby="customerDetailsOffcanvasLabel">
        <div class="offcanvas-header">
        </div>
        <div class="offcanvas-body">
            <!-- Partial view content will be loaded here -->
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        let selectedTables = {}; // Object to store table IDs mapped to section IDs

        // Function to update elapsed times for tables
        function updateElapsedTimes() {
            const now = new Date();

            $(".elapsed-time").each(function () {
                const createdAtStr = $(this).data("created-at");
                if (!createdAtStr) {
                    $(this).text("N/A");
                    return;
                }

                const createdAt = new Date(createdAtStr);
                let diffMs = now - createdAt;

                if (diffMs < 0) {
                    $(this).text("Just now");
                    return;
                }

                let seconds = Math.floor(diffMs / 1000);
                let days = Math.floor(seconds / 86400);
                seconds %= 86400;
                let hours = Math.floor(seconds / 3600);
                seconds %= 3600;
                let minutes = Math.floor(seconds / 60);
                seconds %= 60;

                $(this).text(`${days} days ${hours} hrs ${minutes} min ${seconds} sec`);
            });
        }

        // Update elapsed times every second
        setInterval(updateElapsedTimes, 1000);
        // Run immediately on page load
        updateElapsedTimes();

        // Handle table selection
        $('.table-card').on('click', function () {
            const status = $(this).data('status');
            const tableId = $(this).data('table-id');
            const sectionId = $(this).data('section-id');

            if (status === 'Assigned' || status === 'Running') {
                // Redirect to Menu with orderId
                $.ajax({
                    url: '@Url.Action("RedirectToMenuFromTable", "OrderApp")',
                    type: 'GET',
                    data: { tableId: tableId },
                    success: function (response) {
                        if (response.success && response.redirectUrl) {
                            window.location.href = response.redirectUrl;
                        } else {
                            toastr.error('Failed to redirect to menu.');
                            window.location.href = response.redirectUrl || '@Url.Action("Table", "OrderApp")';
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX Error: ' + status + ' - ' + error);
                        toastr.error('Failed to redirect to menu.');
                        window.location.href = '@Url.Action("Table", "OrderApp")';
                    }
                });
                return;
            }

            if (status !== 'Available') {
                toastr.error('You cannot select this table.');
                return;
            }

            if (!selectedTables[sectionId]) {
                selectedTables[sectionId] = [];
            }

            const index = selectedTables[sectionId].indexOf(tableId);
            if (index === -1) {
                // Select the table
                selectedTables[sectionId].push(tableId);
                $(this).removeClass('custom-card-available').addClass('custom-card-selected');
            } else {
                // Deselect the table
                selectedTables[sectionId].splice(index, 1);
                $(this).removeClass('custom-card-selected').addClass('custom-card-available');
                if (selectedTables[sectionId].length === 0) {
                    delete selectedTables[sectionId]; // Remove section if no tables selected
                }
            }

            // Enable/disable the Assign button based on selection
            const assignBtn = $(this).closest('.accordion-body').find('.assign-btn');
            const anySelected = Object.values(selectedTables).some(tables => tables.length > 0);
            assignBtn.prop('disabled', !anySelected);
        });

        // Handle Assign button click
        $('.assign-btn').on('click', function () {
            const sectionId = $(this).data('section-id');
            const sectionName = $(this).data('section-name');

            // Collect all selected table IDs and section IDs
            const allTableIds = Object.values(selectedTables).flat();
            const sectionIds = Object.keys(selectedTables).map(id => parseInt(id));

            if (allTableIds.length === 0) {
                toastr.error('Please select at least one table.');
                return;
            }

            // Load the customer details offcanvas
            $.get('@Url.Action("ShowCustomerDetailsOffcanvas", "OrderApp")', {
                sectionIds: sectionIds.join(','),
                sectionName: sectionName,
                selectedTableIds: allTableIds.join(',')
            }, function (partialView) {
                $('#customerDetailsOffcanvas .offcanvas-body').html(partialView);
                $('#customerDetailsOffcanvas').offcanvas('show');
            }).fail(function (xhr, status, error) {
                console.error('AJAX Error: ' + status + ' - ' + error);
                toastr.error('Failed to load customer details.');
            });
        });

        // Existing waiting token modal logic
        $('.waiting-token-btn').on('click', function () {
            var sectionId = $(this).data('section-id');
            var sectionName = $(this).data('section-name');
            showWaitingTokenModal(sectionId, sectionName);
        });

        function showWaitingTokenModal(sectionId, sectionName) {
            $.get('@Url.Action("ShowWaitingTokenModal", "OrderApp")', { sectionId: sectionId, sectionName: sectionName }, function (partialView) {
                console.log('Partial View Response:', partialView);
                var modalBodyContent = $(partialView).find('.modal-body').html();
                $('#waitingTokenModal .modal-body').html(modalBodyContent);
                $('#waitingTokenModal').modal('dispose');
                $('#waitingTokenModal').modal('show');
                $.validator.unobtrusive.parse('#waitingTokenModal');
            }).fail(function (xhr, status, error) {
                console.error('AJAX Error: ' + status + ' - ' + error);
                toastr.error('Failed to load modal.');
            });
        }

        $(document).on('submit', '#addWaitingTokenForm', function (e) {
            e.preventDefault();
            var form = $(this);
            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#waitingTokenModal').modal('hide').on('hidden.bs.modal', function () {
                            $(this).data('bs.modal', null);
                            $('.modal-backdrop').remove();
                        });
                    } else {
                        toastr.error(response.message);
                        var modalBodyContent = $(response).find('.modal-body').html() || response;
                        $('#waitingTokenModal .modal-body').html(modalBodyContent);
                        $('#waitingTokenModal').modal('dispose');
                        $('#waitingTokenModal').modal('show');
                        $.validator.unobtrusive.parse('#waitingTokenModal');
                    }
                },
                error: function () {
                    toastr.error('An error occurred.');
                }
            });
        });
    });
</script>

<style>
    .modal-body {
        background-color: #f0f0f0;
        min-height: 200px;
    }

    .circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .available {
        background-color: #d3d3d3;
    }

    .selected {
        border: 2px solid #28a745;
        background-color: transparent;
    }

    .assigned {
        background-color: #91df55;
    }

    .running {
        background-color: #53a2da;
    }

    .custom-card-available {
        border: 2px solid #d3d3d3;
    }

    .custom-card-occupied {
        border: 2px solid #0f88df;
        background-color: #e0f2ff;
    }

    .custom-card-reserved {
        border: 2px solid #0aeb3e;
        background-color: #f2faec;
    }

    .custom-card-default {
        border: 2px solid #6c757d;
    }

    .custom-card-selected {
        border: 2px solid #28a745;
        background-color: transparent;
    }

    .accordion-button.reset-button-styles {
        background: none !important;
        border: none !important;
        padding: 1rem !important;
    }

    .accordianLeft {
        flex-shrink: 0;
    }
</style>